const path = require('path');
const fs = require('fs-extra');

class FileUtils {

    static async collectFileContent(filePaths, root) {
        const resultMap = new Map();
        filePaths.forEach((filePath) => {
            let fileContent = fs.readFileSync(filePath);
            resultMap.set(FileUtils.toUnixFileName(path.relative(root, filePath)), fileContent.toString('utf-8'));
        });
        return resultMap;
    }

    /**
     * Returns map of files with content for a given directory
     * @param root  Root directory
     * @param sourceDir Directory to start the traversal
     * @param filter Filter function
     * @returns {Promise.<Map>}
     */
    static async collectFiles(root, sourceDir, filter) {
        const files = new Map();
        FileUtils._traverseFileSystem(root, sourceDir, files, filter);

        return files;
    }

    static _traverseFileSystem(root, sourceDir, files, filter) {
        const absoluteDir = path.resolve(root, sourceDir);
        if (fs.statSync(absoluteDir)) {
            fs.readdirSync(absoluteDir).map((subDirEntry) => path.join(absoluteDir, subDirEntry)).forEach((entry) => {
                var stats = fs.statSync(entry)
                if (stats.isDirectory() && (!filter || filter.call(this, entry))) {
                    FileUtils._traverseFileSystem(root, entry, files, filter);
                }
                if (stats.isFile() && (!filter || filter.call(this, entry))) {
                    let fileContent = fs.readFileSync(entry);
                    files.set(FileUtils.toUnixFileName(path.relative(root, entry)), fileContent.toString('utf-8'));
                }
            });
        }
    }

    /**
     * Converts windows file paths to unix
     * @param filename File path
     * @returns {string}
     */
    static toUnixFileName(filename) {
        return filename.replace(/\\/g, '/');
    }

    /**
     * Normalizes filename to os specific format
     * @param {string} filename
     */
    static normalizeFileName(filename) {
        return path.normalize(filename);
    }

}

module.exports = FileUtils;
