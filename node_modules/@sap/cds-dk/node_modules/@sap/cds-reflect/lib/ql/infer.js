const cds = require('../index'), _builtin = cds.builtin.types
const { entity } = _builtin

/** Lazily resolves a query's _target property */
module.exports = (q,defs) => {
  if (!q._target || q._target.kind !== 'entity') Object.defineProperty (q, '_target', {value:(
    q.SELECT ? _resolve (q.SELECT.from, defs) :
    q.INSERT ? _resolve (q.INSERT.into, defs) :
    q.UPDATE ? _resolve (q.UPDATE.entity, defs) :
    q.DELETE ? _resolve (q.DELETE.from, defs) :
    _resolve (undefined)
  )})
  return q._target
}

const _resolve = (entity, defs) => {
  if (!entity || entity.join || entity.set) return //_unresolved()
  if (entity.name) return entity
  if (entity.ref) {
    if (entity.ref.length === 1) {
      entity = entity.ref[0]
      if (entity.id) entity = entity.id
    } else {
      let target = {elements:defs}
      for (let each of entity.ref) {
        const e = each.id || each
        const a = target.elements[e]; if (!a) return _unresolved (target.name +':'+e)
        target = defs [a.target || a.name]; if (!target) return _unresolved (a.target)
      }
      return target
    }
  }
  return defs[entity] || _unresolved(entity)
}

const _unresolved = (name) => {
  return { name, __proto__:entity, _unresolved:true }
}
