
module.exports = { get html(){

    const cds = require('../lib')
    const { find, path, readFileSync } = cds.utils, {app} = cds.env.folders
    const htmls = find (app, ['*.html', '*/*.html', '*/*/*.html']).map(file => path.relative(app, file).normalize())
    const odata = service => Object.keys(service._adapters).find (a => a.startsWith ('odata'))

    const html = readFileSync(path.join(__dirname,'index.html'),'utf-8') .replace (
        '{{content}}',
        htmls.map(html => `\n<span><a href="${html}">/${html}</a></span>`).join(',') +
        cds.service.providers.map (srv => `
        <h3>
            <a href="${srv.path}">${srv.path}</a>
            ${odata(srv) ? `/ <a href="${srv.path}/$metadata">$metadata</a>` : ``}
        </h3>
        <ul>${_entities_in(srv).map (e => {
            const prevLink = srv._previewLink ? srv._previewLink (srv.name, e) : null
            return `
            <li>
                <a href="${srv.path}/${e}">${e}</a>
                ${ prevLink ? `<a class="preview" href="${prevLink.href}" title="${prevLink.title}"> &hellip;in ${prevLink.name}</a>` : ``}
            </li>`}).join('')}
        </ul>
    `) .join(''))

    Object.defineProperty (this,'html',{value:html})
    return html

    function _entities_in (service) {
        const exposed=[], {entities} = service
        for (let each in entities) {
            const e = entities [each]
            if (e['@cds.autoexposed'] && !e['@cds.autoexpose'])  continue
            if (e.name.endsWith('DraftAdministrativeData'))  continue
            if (e.name.endsWith('_texts'))  continue
            exposed.push (each)
        }
        return exposed
    }

}}
