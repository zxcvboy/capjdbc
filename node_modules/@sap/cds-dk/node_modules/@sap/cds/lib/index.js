if (global.cds) Object.assign(module,{exports:global.cds}) ; else {

  class Iterable { *[Symbol.iterator]() {for (let e in this) yield this[e]}}
  const core = require ('@sap/cds-reflect/lib'), { extend, lazified } = core
  require = lazified (module)  // eslint-disable-line

  /** cds is the central facade to all cds functions */
  const cds = module.exports = global.cds = extend (core) .with ({

    // Loading and Compiling Models
    resolve: require ('./models/resolve'),
    model: undefined,
    load: require ('./models/load'),
    parse: require ('./models/parse'),
    compile: require ('./models/compile-new'),
    localize: require ('./models/i18n'),

    // Providing and Consuming Services
    services: new Iterable,
    service: require ('./srv'),
    connect: require ('./srv/connect'),
    serve: require ('./srv/serve'),
    server: require ('../server'),
    deploy: require ('./db/deploy'),

    ApplicationService: lazy => module.require('@sap/cds-runtime/lib/cds-services/services/Service.js'),
    DatabaseService: lazy => module.require('@sap/cds-runtime/lib/db/Service.js'),
    RemoteService: lazy => module.require('@sap/cds-runtime/lib/rest/service.js'),
    MessagingService: lazy => module.require('@sap/cds-runtime/lib/messaging/service.js'),
    Service: require ('./srv/Service'),
    Request: require ('./srv/Request'),
    Event: require ('./srv/Event'),
    User: require ('./srv/User'),
    ql: require ('./ql'),

    // Helpers
    error: require ('./utils/errors'),
    exec: require ('../bin/cds'),
    env: require ('./env'),
    utils: require ('./utils/fs'),
    local: require ('./utils/cls'),
    debug: (x='all',_='[cds] -') => RegExp(`\\b(y|all|${x})\\b`) .test (process.env.DEBUG)
    && ((...args) => console.warn (_, ...args)), // eslint-disable-line

    // Shortcuts
    get requires(){ return cds.env.requires },
    get get(){ return cds.load.only },

    // Information
    version: lazy => module.require('../package.json').version,
    home: lazy => __dirname.slice(0,-4),

  })

  // adding facade to primary db
  const _missing = new Proxy ({},{ get:function _(t,p){ require('./utils/errors').no_primary_db(p,_)}})
  /** @type import('./Service') */ let db = _missing
  extend (cds.__proto__) .with ((class {

      set db(v) { db = v || _missing }
      get db() { return db === _missing ? undefined : db }
      get entities() { return db.entities }

      transaction(..._) { return db.transaction(..._) }
      tx(..._) { return db.tx(..._) }
      run(..._) { return db.run(..._) }
      foreach(..._) { return db.foreach(..._) }
      stream(..._) { return db.stream(..._) }
      read(..._) { return db.read(..._) }
      insert(..._) { return db.insert(..._) }
      update(..._) { return db.update(..._) }
      delete(..._) { return db.delete(..._) }

      disconnect(..._) { return db.disconnect(..._) }

  }).prototype)


  // legacy and to be moved stuff -> hidden for tools in cds.__proto__ ...
  extend (cds.__proto__) .with (lazified ({
    in: (cwd) => !cwd ? cds : {__proto__:cds, cwd, env: cds.env.for('cds',cwd) },
    get alpha_localized() { return module.require('./alpha/_localized') },
    get session() { return cds.db },
    get options() { return cds.db && cds.db.options },
    get unfold() { return cds.compile },
    get config() { return cds.env },
    build: require('./build'),
    mtx: require('./mtx'),
  }))

  // Add global forwards to cds.ql
  !['SELECT','INSERT','UPDATE','DELETE','CREATE','DROP'].forEach (p => Reflect.defineProperty (global, p, {get(){ // NOSONAR
    const v = this.cds && this.cds.ql[p]
    Object.defineProperty (this,p,{value:v})
    return v
  }, configurable: true }))

  // Workaround for glitch in jest 26
  // if (global.afterAll) afterAll (()=>{ global.cds = undefined })
}
