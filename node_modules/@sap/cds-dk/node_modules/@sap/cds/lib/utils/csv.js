const CSV = module.exports = { read, parse, parseHeader, serialize }

function read (res) {
  try{
    const fs = require ('fs')
    return CSV.parse (fs.readFileSync (res, 'utf-8'))
  } catch(e){/* ignore */}
}

function parseHeader (csv) {
  if (csv[0] === BOM)  csv = csv.slice(1)
  const [delimiter] = /[,;\t]/.exec(csv)||[';']
  const [header] = /[^\n]+/.exec(csv)
  const cols = header.split(delimiter) .map (each => each.trim())
  return { cols, delimiter }
}

function parse (csv) {
  if (csv[0] === BOM)  csv = csv.slice(1)
  const [sep] = /[,;\t]/.exec(csv)||[';']
  const lines = csv.split(/\s*\n/)
  const rows = []
  for (let line of lines) {
    const values=[]; let val="", c
    for (let i=0; i<line.length; ) {
      c = line[i++]
      // done with current val?
      if (c === sep) {
        values.push (value4(val))
        val = "" //> start new val
        continue
      }
      // starting a string?
      if (c === '"') {
        if (line[i] === '"') val += line[i++] // "" > "
        else while (i<line.length) {
          const x = line[i++]
          if (x === '"') {
            if (line[i] === '"')  val += line[i++] // "" > "
            else break  //> we're done with the string
          }
          else val += x === '\\' ? '\\\\' : x
        }
        continue
      }
      // add character to val
      val += c === '\\' ? '\\\\' : c
    }
    if (val || c === sep) values.push (value4(val))
    if (values.length > 0) rows.push (values)
  }
  return rows
}

function value4 (val) {
  const v = val.trim()
  if (!v) return undefined
  if (v === 'true') return true
  if (v === 'false') return false
  else return v
}

function serialize (rows, columns, bom='\ufeff') {
  let csv = bom + ( columns || Object.keys(rows[0]) ).join(';') +"\n"
  for (let key in rows)  csv += `${key};${rows[key]}\r\n`
  return csv
}

const BOM = '\ufeff'
