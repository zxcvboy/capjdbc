const cds = require ('..')
if (cds.env.features.cls) {
  const { executionAsyncId, createHook } = require ('async_hooks')
  const locals = new Map

  const hook = createHook ({
    init (asyncId, type, triggerAsyncId) {
      const local = locals.get (triggerAsyncId)
      if (local) locals.set (asyncId,local)
    },
    destroy (asyncId) {
      locals.delete (asyncId)
    },
  }).enable()

  module.exports = new Proxy (locals, {
    get (_,property) { switch (property) {
      case '$hook': return hook
      case '$all': return locals.get (executionAsyncId())
      default: {
        const local = locals.get (executionAsyncId())
        if (local) return local[property]
      }
    }},
    set (_,property,value) {
      let local = locals.get (executionAsyncId())
      if (!local) locals.set (executionAsyncId(), local = {})
      return local[property] = value }
    }
  )
} else {
  module.exports = {}
}

// quick 'n dirty test...
if (!module.parent) {
  cds.env.features.cls = true
  let ID=100
  for (let i=0; i<9; ++i) {
    setTimeout(()=>{
      const id = cds.local.id = ++ID
      // eslint-disable-next-line no-console
      console.log (id, cds.local.id, 'started')
      // eslint-disable-next-line no-console
      setTimeout(()=> console.log (id, cds.local.id, 'done'), 5000 * Math.random())
    }, 5000 * Math.random())
  }
}
