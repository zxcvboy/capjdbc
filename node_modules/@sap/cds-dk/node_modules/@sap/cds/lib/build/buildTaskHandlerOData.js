const path = require('path')
const BuildTaskHandler = require('./buildTaskHandler')
const { BUILD_OPTION_OUTPUT_MODE, OUTPUT_MODE_RESULT_ONLY } = require('./constants')
const DEBUG = process.env.DEBUG

class BuildTaskHandlerOData extends BuildTaskHandler {
    constructor(name, task, buildOptions) {
        super(name, task, buildOptions)
        this._result = {
            dest: task.dest,
            csn: {},
            edmx: new Map(),
            languages: new Set(),
            services: new Set()
        }
    }

    async loadModel(modelPaths) {
        // compile to csn
        const options = this.options()

        // $location as well as @source paths are relative to the project root dir.
        // $location is currently used in namespace checker to differentiate entities defined by extension
        // from those defined by the base model. In mtx server side build scenario project root dir differs
        // from process.cwd().
        // @source is required for custom handler resolution if serving the model from csn.json
        options.cwd = this.buildOptions.root

        const model = await this.cds.load(modelPaths, options)
        this.pushMessages(options.messages || options._messages)
        return model
    }

    async compileEdmx(model, edmxDest, compileOptions = {}) { // NOSONAR
        const promises = []
        const services = this.cds.reflect(model).all(this.cds.service)

        // TODO mtx build_helper tests currently expects this, strange...
        this._result.languages.add('')

        // new compile impl is throwing error in case no services exist!
        if (services.length > 0) {
            const options = {
                ...this._options4edmx(),
                ...compileOptions
            }

            if (DEBUG) {
                this.logger.log(`[cds] - compiling edmx files using OData version ${options.version}`)
            }

            const result = this.cds.compile.to.edmx(model, options)
            this.pushMessages(options.messages || options._messages)

            if (result) {
                let langs = this.task.options.lang || this.cds.env.i18n.languages
                if (langs.split) { // string to array
                    langs = langs.split(',')
                }
                for (let [content, key] of result) {
                    const serviceName = key.file ? key.file : key.name
                    this._result.services.add(serviceName)
                    const locResult = this.cds.localize(model, langs, content)
                    if (locResult[Symbol.iterator]) { // multi result
                        for (let [localizedContent, { lang }] of locResult) {
                            promises.push(this._writeEdmxForLang (localizedContent, serviceName, lang, edmxDest))
                        }
                    } else { // single result
                        promises.push(this._writeEdmxForLang (locResult, serviceName, langs[0], edmxDest))
                    }
                }
            }
        }
        return Promise.all(promises)
    }

    collectBundles(model) {
        // collect effective i18n properties...
        let bundles = {}
        const bundleGenerator = this.cds.localize.bundles4(model)
        if (bundleGenerator && bundleGenerator[Symbol.iterator]) {
            for (let [locale, bundle] of bundleGenerator) {
                // fallback bundle has the name ""
                if (typeof locale === 'string') {
                    bundles[locale] = bundle
                }
            }
        }

        // omit bundles in case the fallback bundle is the only existing entry
        const keys = Object.keys(bundles)
        if (keys.length === 1 && keys[0] === "" && Object.keys(bundles[keys[0]]).length === 0) {
            bundles = {}
        }
        return bundles
    }

    _options4odata() {
        const o = this.options()
        o.version = this.env.odata.version
        return o
    }

    _options4edmx() {
        const o = this._options4odata()
        o.service = 'all'
        return o
    }

    _writeEdmxForLang (content, serviceName, lang, edmxDest) {
        this._result.languages.add(lang)
        const fileName = serviceName + (lang ? '_' + lang + '.xml' : '.xml')
        this._result.edmx.set(fileName, content)

        if (!this.hasBuildOption(BUILD_OPTION_OUTPUT_MODE, OUTPUT_MODE_RESULT_ONLY)) {
            return this.write(content).to(path.join(edmxDest, fileName))
        }
    }
}
module.exports = BuildTaskHandlerOData
