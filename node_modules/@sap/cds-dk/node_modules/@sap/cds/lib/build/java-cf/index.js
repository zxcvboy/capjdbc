const fs = require('@sap/cds-foss')('fs-extra')
const path = require('path')

const BuildTaskHandlerOData = require('../buildTaskHandlerOData')
const { BuildMessage, isOldJavaStack } = require('../util')

const { BUILD_OPTION_OUTPUT_MODE, ODATA_VERSION, ODATA_VERSION_V2, ODATA_VERSION_V4,
    OUTPUT_MODE_RESULT_ONLY, SEVERITY_INFO, SEVERITY_WARNING, FILE_EXT_CDS } = require('../constants')
const DEBUG = process.env.DEBUG

const DEFAULT_COMPILE_DEST_FOLDER = path.normalize("src/main/resources/edmx")

class JavaCfModuleBuilder extends BuildTaskHandlerOData {
    constructor(task, buildOptions) {
        super("Java CF Module Builder", task, buildOptions)
    }

    init() {
        this.task.options.compileDest = path.resolve(this.task.dest, this.task.options.compileDest || DEFAULT_COMPILE_DEST_FOLDER)
    }

    async build() {
        const modelPaths = this.resolveModel()
        const { src, dest } = this.task
        if (!modelPaths || modelPaths.length === 0) {
            this.logger.log(`[cds] - no model found, skip build`)
            return this._result
        }
        if (DEBUG) {
            this.logger.log(`[cds] - model: ${this.stripProjectPaths(modelPaths).join(", ")}`)
        }

        const odataOptions = {
            version: this.env.get(ODATA_VERSION)
        }

        if (await isOldJavaStack([src, this.buildOptions.root])) {
            // default is now v4 and not v2 anymore, so warn and overwrite with v2 if using default
            if (!this.env.for("cds", this.buildOptions.root, false, true).get(ODATA_VERSION)) {
                odataOptions.version = ODATA_VERSION_V2

                this.pushMessages(new BuildMessage(
                    "Forcing OData v2 for building though the default is v4. Make sure to define OData v2 in cds configuration.", SEVERITY_INFO))
            }

            // 'sql_mapping' and 'cds.persinstence.name' annotations are required by old java stack
            if (this.env.sql.names !== 'plain') {
                odataOptions.sql_mapping = this.env.sql.names
            }
        } else {
            // new java stack
            if (odataOptions.version !== ODATA_VERSION_V4) {
                this.pushMessages(new BuildMessage(
                    `This project only supports OData v4. Using OData ${odataOptions.version} from cds configuration.`, SEVERITY_WARNING))
            }
        }

        const model = await this.loadModel(modelPaths)
        const promises = [
            this._compileCsn(model, this.task.options.compileDest, odataOptions),
            this.compileEdmx(model, this.task.options.compileDest, odataOptions)
        ]

        if (!this.hasBuildOption(BUILD_OPTION_OUTPUT_MODE, OUTPUT_MODE_RESULT_ONLY)) {
            promises.push(this._copyNativeContent(src, dest))
        }
        await Promise.all(promises)

        return this._result
    }

    async clean() {
        if (this.isStagingBuild()) {
            await super.clean()
            return
        }
        if (DEBUG) {
            this.logger.log(`Deleting build target folder ${this.task.options.compileDest}`)
        }
        await fs.remove(this.task.options.compileDest)
    }

    async _copyNativeContent(src, dest) {
        return super.copyNativeContent(src, dest, (entry) => {
            if (fs.statSync(entry).isDirectory()) {
                return true // using common filter for folders
            } else {
                const extname = path.extname(entry)
                return extname !== FILE_EXT_CDS
            }
        })
    }

    async _compileCsn(model, csnDest, compileOptions) {
        // csn for service providers
        const options = {
            ...this._options4odata(),
            ...compileOptions
        }

        const csn = this.cds.compile.for.odata(model, options)
        this._result.csn = csn
        this.pushMessages(options.messages || options._messages)

        if (!this.hasBuildOption(BUILD_OPTION_OUTPUT_MODE, OUTPUT_MODE_RESULT_ONLY)) {
            await this.write(this.cds.compile.to.json(csn)).to(path.join(csnDest, 'csn.json'))
        }
    }
}
module.exports = JavaCfModuleBuilder
