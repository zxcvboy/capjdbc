const cds = require ('..')

module.exports = async (files, o) => {
  // first has unfolded includes & extends, second has unfolded compositions
  const [unfolded,csn] = await Promise.all ([ o, {...o,clean:true} ].map (o => cds.load(files,o)))
  cds.linked(csn).forall (cds.Composition, (c) => {
    if (c._target.kind !== 'entity' || c._target.abstract) {
      const uc = _unfolded(c); if (!uc) return
      const ue = unfolded.definitions [uc.target]
      // console.warn (c.parent && c.parent.name, c.name, '->', c.target, '>>', uc.target)
      if (ue.kind === 'entity') delete unfolded.definitions [uc.target] // remove this line if you want to keep unfolded entities like House_cc
      // ^ Note: that does not reach nested unfolded entities
      _unfolded(c.parent).elements [c.name] = c
    }
  })
  function _unfolded (def) {
    if (def.parent) {
      const up = _unfolded(def.parent)
      return up && up.elements[def.name]
    } else {
      return unfolded.definitions [def.name]
    }
  }
  return unfolded
}
