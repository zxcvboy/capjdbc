const cds = require('..')
const DEBUG = cds.debug('alpha|_localized')
const _4sqlite = cds.env.i18n.for_sqlite || []

///////////////////////////////////////////////////////////
//   cds-compiler part
//

/**
 * For each localized.<view> we get from the compiler, create additional
 * views for sqlite as CREATE VIEW localized_<locale_ ...
 */
function unfold_ddl (ddl, csn, o) { // NOSONAR
	if (o && o.toSql && o.toSql.dialect === 'hana') return ddl
	const localized_views = ddl.filter (each => each.startsWith ('CREATE VIEW localized_'))
	for (let localized_view of localized_views) {
		for (let locale of _4sqlite) ddl.push (localized_view
			.replace (/localized_/g, `localized_${locale}_`)
			.replace (/\.locale = 'en'/, `.locale = '${locale}'`)
		)
	}
	DEBUG && localized_views.length && DEBUG ('Added localized views for sqlite to DDL for', csn._sources)
	return ddl
}



///////////////////////////////////////////////////////////
//   cds.services part
//

/**
 * For each localized.<view> we get from the compiler, ensure there's a
 * corresponding localized.<locale>. entry in the model to support reflection.
 */
const _been_here = Symbol('is _localized')
function unfold_csn (m) { // NOSONAR

	// only do that once per model
	if (!m || m[_been_here]) return m
	const pass2 = []

	// Pass 1 - add localized.<locale> entities and views
	for (let each in m.definitions) {
		if (!each.startsWith('localized.')) continue
		const d = m.definitions [each]
		for (let locale of _4sqlite) {
			const name = localized_(locale, each)
			const source = localized_(locale, d.source)
			const x = {__proto__:d, name, source }
			Object.defineProperty (m.definitions, name, {value:x})
			pass2.push ([x,locale])
		}
	}

	// Pass 2 - redirect associations/compositions in elements to localized.<locale> targets
	for (let [x,locale] of pass2) {
		let any = null
		for (let each in x.elements) {
			const e = x.elements [each]
			if (e.target && e.target.startsWith('localized.')){
				const elements = any || (any = x.elements = {...x.elements})
				const target = localized_(locale, e.target)
				elements[e.name] = Object.defineProperty (
					{__proto__:e, target}, '_target', {
						value: m.definitions[target]
					}
				)
			}
		}
	}

	// done
	DEBUG && pass2.length && DEBUG ('Added localized views for sqlite to csn for', m._sources)
	return Object.defineProperty (m, _been_here, {value:true})
}


function localized_ (locale, view) {
	if (!view)  return
	if (!view.startsWith('localized.'))  return view
	return `localized.${locale}.${view.slice(10)}`
}


// feature-toggled exports
module.exports = Object.assign ( unfold_csn, { unfold_ddl })
if (!cds.env.features.localized) module.exports = Object.assign ( x=>x, { unfold_ddl: x=>x })
