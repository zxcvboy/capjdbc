module.exports = Object.assign ( _serve, {
    options: [
        '--service', '--from', '--to', '--at', '--with',
        '--port',
    ],
    flags: [
        '--project', '--projects',
        '--in-memory', '--in-memory?',
        '--mocked', '--with-mocks', '--with-bindings',
        '--watch',
    ],
    shortcuts: [ '-s', undefined, '-2', '-a', '-w', '-p' ],
    help: `
# SYNOPSIS

    *cds serve* [ <filenames> ] [ <options> ]
    *cds serve* [  <service>  ] [ <options> ]

    Starts http servers that load service definitions from cds models and
    construct service providers, mounted to respective endpoints to serve
    incoming requests.

    If the given argument refers to existing files, an effective model
    is loaded from these files and *all services*, that are served.
    The default is '*', which loads all models from the project.

    If the given argument doesn't match an existing file, it's used
    as the name of the *single service* to serve.


# OPTIONS


    *-s | --service* <name>  (default: 'all')
    *-f | --from* <model>    (default: '*')
    *-w | --with* <impl>
    *-a | --at* <endpoint>
    *-2 | --to* <protocol>

        Use these options to serve a _single service_ from specified model(s)
        to load service definitions from, the endpoint to bind the service
        to, the protocol (i.e. _fiori_, _odata_, or _rest_) to serve and
        optionally which implementation to use (i.e. a _.js_ file).

    *-p | --project* [<project>]

        Runs _cds serve all_ for the specified project; default: cwd.
        You can use *cds run* as shortcut.

    *--port* <number>

        Specify the port on which the launched server shall listen.
        If you specify '0', the server picks a random free port.
        Alternatively, specify the port using env variable _PORT_.

    *--watch* [<project>]

        Like *--project* but starts through _nodemon_ to restart the server
        upon changes in code or models.
        You can use *cds watch* as shortcut, which is equivalent to:
        *cds serve --with-mocks --in-memory? --watch --project ...*

    *--mocked*

        Use this option to launch a _single service_  in a mock server, for
        a model you imported from an external source, like an S/4 system,.
        In addition to constructing the service provider, this will bootstrap
        a transient _in-memory_ database, filled with tables corresponding
        to the signatures of the service's exposed entities.

    *--with-mocks*

        Use this in combination with the variants serving _multiple services_.
        It starts in-process mock services for all required services configured
        in _package.json#cds.requires_, which don't have external bindings
        in the current process environment.

    *--with-bindings*

        Use this option in local tests, to have all services provided by a
        process registered with their physical urls in a temporary file.
        All required services are bound automatically upon bootstrapping.
        Option *--with-mocks* subsumes this option.

    *--in-memory[?]*

        Automatically adds a transient in-memory database bootstrapped on
        each (re-)start in the same way *cds deploy* would do, based on defaults
        or configuration in _package.json#cds.requires.db_. Add a question
        mark to apply a more defensive variant which respects the configured
        database, if any, and only adds an in-memory database if no
        persistent one is configured.

        Requires an sqlite driver to be installed. For example: _npm i sqlite3_.

# EXAMPLES

    *cds serve*
    *cds serve* all
    *cds serve* CatalogService *--from* app/
    *cds serve* CatalogService *--from* srv/ *--at* /cats *--to* rest
    *cds serve* all --watch --with-mocks --in-memory?
    *cds run* some/project
    *cds watch* some/project
    *cds watch*

`})


const is_in_memory = o => o && o.credentials && o.credentials.database === ':memory:'
const production = process.env.NODE_ENV === 'production'
const {existsSync:exists} = require ('fs')
const {dirname,resolve} = require ('path')

async function _serve (...args) {
    try {
        await serve (...args)
        if (!global.cds.service.providers.length) _failed(
            `No service definitions found in loaded models.`
        )
    } catch (e) {
        if (e.code === 'MODEL_NOT_FOUND') _failed(
            `No models found at ${global.cds.resolve(e.model,false)}.`
        )
        else throw e
    }
    function _failed (msg) {
        console.error ('\n   ', msg)
        if (serve.watch) {
            console.error ('    Waiting for some to arrive...\n')
        } else {
            console.error ('    Terminating cds serve!\n')
            process.exit(1)
        }
    }
}


/**
 * The main function which dispatches into the respective usage variants.
 * @param {string[]} all - project folder, model filenames, or service name
 */
async function serve (all=[], o={}) { // NOSONAR

    // canonicalize options to ease subsequent tasks...
    const [pms] = all // project folder, model filenames, or service name
    if (o.project||o.projects) { o.project = pms; o.service='all'; o.from='*' }
    else if (o.service)        { o.from    = pms }
    else if (o.from)           { o.service = pms }
    else if (exists(pms))      { o.service ='all', o.from = all }
    else                       { o.service = pms,  o.from = '*' }
    if (!o.mocked)             { o.mocked  = o['with-mocks'] }

    // handle --watch and --project
    if (o.watch)  return _watch (o.project,o)   // cds serve --watch <project>
    if (o.project) {                            // cds serve --in <project>
        process.env._original_cwd = process.cwd()
        try { process.chdir (o.project) }
        catch(e){
            try { process.chdir (dirname (require.resolve(o.project+'/package.json'))) }
            catch(_){ throw e }
        }
        process.on('exit', ()=> process.chdir (process.env._original_cwd))
    }

    // IMPORTANT: never load any @sap/cds modules before the chdir above happened!
    const cds = _prepare_cds()

    // handle --in-memory resp. --in-memory? (requires cds.env)
    o.in_memory = o['in-memory'] || !production && o['in-memory?'] && !cds.requires.db
    if (o.in_memory)  cds.env.add ({requires: { db: {
        kind:'sqlite', ...cds.requires.sqlite,
        credentials:{database:':memory:'}
    }}})
    else o.in_memory = is_in_memory(cds.requires.db)

    // load service bindings when mocking or asked to
    if (o.mocked || o['with-bindings']) await cds.service.bindings

    // add dev helper for Fiori URLs
    if (process.env.NODE_ENV!=='production')  require('../app/fiori/routes')

    // boostrap server from project-local server.js or from @sap/cds/server.js
    const server_js = _local('server.js') || _local(cds.env.folders.srv,'server.js') || cds.server
    const server = await server_js(o)
    const done = ()=>cds.emit('listening', { server, url: `http://localhost:${server.address().port}` })
    server.listening ? done() : server.on('listening',done)

    // add fiori preview links to default index.html
    if (cds.env.features.fiori_preview) require('../app/fiori/preview')

}


function _prepare_cds () { // NOSONAR

    const cds = require('../lib')

    const cds_requires = Object.create(cds.requires)
    for (let entry of Object.values(cds.requires)) {
      if (entry.service)  cds_requires [entry.service] = entry
    }
    const cwd = process.env._original_cwd || process.cwd()
    const {relative} = require('path'), _relative = file => relative (cwd,file)
    const _timer = '\n[cds] - launched in'
    console.time (_timer)
    console.log()

    const _watched = serve.watch = cds.watch || process.env._cds_watch
    if (_watched) cds.once('connect', ()=>{
        console.log ('[cds] - using bindings from:', { registry: cds.service.bindings.registry })
    })

    // print information when model is loaded
    cds.on ('loaded', (model)=>{
        const all = model._sources.map (_relative)
        console.log (`[cds] - model loaded from ${all.length} file(s):\n\x1b[2m`)
        for (let each of all)  console.log (' ', each)
        console.log ('\x1b[0m')
    })

    // print information about each connected service
    cds.on ('connect', ({name,kind,options:{use,credentials}})=>{
        console.log (`[cds] - connect to ${name} > ${use||kind}`, _redacted(credentials))
    })

    // print information about each provided service
    cds.on ('serving', ({name,path,options:o}) => {
        const serving = name in cds_requires ? 'mocking' : 'serving'
        const details = { at:path }
        if (o.impl && o.impl._source) details.impl = _relative(o.impl._source)
        console.log (`[cds] - ${serving} ${name}`, details)
    })

    // print info when we are finally on air
    cds.once ('listening', ({url})=>{
        console.timeEnd (_timer)
        console.log ('[cds] - server listening on', {url})
        if (_watched || process.stdin.isTTY)  console.log (`[ terminate with ^C ]\n`)
    })

    return cds
}


function _local (...path) {
    const file = resolve(...path)
    if (exists(file)) return require (file)
}


function _watch (project,o) {
    o.args = process.argv.slice(2) .filter (a => a !== '--watch' && a !== '-w')
    try { return require('@sap/cds-dk/bin/watch')([project],o) }
    catch (e) { if (e.code !== 'MODULE_NOT_FOUND')  throw e }
    console.error (`
    cds run --watch has moved.  Please install '@sap/cds-dk' and use
    'cds watch' instead as follows:

        npm uninstall -g @sap/cds
        npm install   -g @sap/cds-dk

        cds watch
    `)
}

// mascades password-like strings, also reducing clutter in output
function _redacted (cred) {
    const secrets = /(password)|(certificate)|(ca)/i // 'certificate' and 'ca' on HANA
    const newCred = Object.assign({}, cred)
    Object.keys (newCred)
        .filter (k => typeof newCred[k] === 'string' && secrets.test(k))
        .forEach (k => newCred[k] = '...')
    return newCred
}

/* eslint no-console:off */
