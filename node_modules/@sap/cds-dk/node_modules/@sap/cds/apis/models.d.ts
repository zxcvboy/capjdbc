import { Query, expr, _xpr } from "@sap/cds-reflect/apis/cqn"
import { CSN } from "@sap/cds-reflect/apis/csn"

type csn = CSN
type cqn = Query

export = cds_models
declare class cds_models {

    /**
     * Provides a set of methods to parse a given model, query or expression.
     * You can also use `cds.parse()` as a shortcut to `cds.parse.cdl()`.
     */
    parse : {
        /** Shortcut to `cds.parse.cdl()` */
        (src: string) : csn
        cdl (src:string) : csn
        cql (src:string) : cqn
        expr (src:string) : expr
        xpr (src:string) : _xpr
        ref (src:string) : string[]
    }


    /**
     * Provides a set of methods to parse a given model, query or expression.
     * You can also use `cds.compile(csn).to('<output>')` as a fluent variant.
     */
    compile : {
        for: {
            odata (model:csn) : csn
        },
        to: {
            json (model:csn) : string
            yaml (model:csn) : string
            cdl (model:csn) : string
            sql (model:csn) : string
            edm (model:csn) : string
            edmx (model:csn) : string
        }
        /** Shortcut to `cds.parse.cdl()` */
        (csn: csn) : {
            for: ( output: 'json' | 'yaml' | 'yml' | 'sql' | 'cdl' | 'edm' | 'edmx', options?:object ) => csn
            to: ( output: 'json' | 'yaml' | 'yml' | 'sql' | 'cdl' | 'edm' | 'edmx', options?:object ) => string
        }
    }



    /**
     * Loads and parses models from the specified files.
     * Uses `cds.resolve` to fetch the respective models.
     * @param {string} model - the name of a model or a folder containing models
     */
    load (model:string) : Promise<csn>

    /**
	 * Emitted whenever a model is loaded using cds.load().
	 */
	on (event : 'loaded', listener : (model : csn) => void) : this


    /**
     * Resolves given file or module name(s) to an array of absolute file names.
     * Uses Node's `require.resolve` internally with the following additions:
     * - relative names are resolved relative to the current working directory instead of the current JavaScript module; hence, use __dirname if you want to find or load models relative to the current module.
     * - if no file extension is given, `.csn` and `.cds` will be appended in that order.
     * @param models - The file or module name(s) of a model or a folder containing models. Specify `'*'` to fetch moels from default locations, i.e. `[ 'db/', 'srv/', 'app/' ]`
     * @returns An array of absolute file names or `undefined` if none could be resolved.
     */
    resolve (model:string|string[]) : string[] | undefined

}
