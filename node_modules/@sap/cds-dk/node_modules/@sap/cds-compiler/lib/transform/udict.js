/**
 * dictionary utils
 */

/**
 * Checks if the provided parameter is an object
 * @param obj the variable to check
 * @returns true if the parameter is an object otherwise it returns false
 */
function isObject(obj) {
  return obj && typeof obj === 'object';
}

/**
 * Callback of the dmap function called for each leaf it walks
 * @callback dmapCallback
 * @param {object} node
 * @param {string} name of the node
 * @return resulting object
 */

/**
 * Transforms all elements of a dictionary into another.
 * Loops over all elements in an object and calls the specified callback.
 * The callback function returns the new representation of the passed element.
 * @param {object} obj
 * @param {dmapCallback} callback
 * @return resulting dictionary
 */
function dmap(obj, callback) {
  let R = Object.create(null);
  for(var key in obj) {
    let iobj = obj[key];
    R[key] = callback(iobj,key);
  }
  return R;
}

/**
 * Callback of the dfilter function called for each leaf it walks
 * @callback dfilterCallback
 * @param {object} node
 * @param {string} name of the node
 * @return true to include the node
 */

/**
 * Filters elements of a dictionary and returns the new dictionary.
 * Loops over all elements in an object and calls the specified callback.
 * The callback function returns true if the element should be included.
 * @param {object} obj
 * @param {dfilterCallback} callback
 * @return resulting dictionary
 */
function dfilter(obj, callback) {
  let R = Object.create(null);
  for(var key in obj) {
    let iobj = obj[key];
    if(callback(iobj,key))
      R[key] = iobj;
  }
  return R;
}

/**
 * Callback of the dfiltermap function called for each leaf it walks
 * @callback dfiltermapCallback
 * @param {object} node
 * @param {string} name of the node
 * @return resulting object or undefined to skip the object
 */

/**
 * Transforms all elements of a dictionary into another.
 * Loops over all elements in an object and calls the specified callback.
 * The callback function returns the new representation of the passed element.
 * To skip the element the callback function should return "undefined".
 * @param {object} obj
 * @param {dfiltermapCallback} callback
 * @return resulting dictionary
 */
function dfiltermap(obj, callback) {
  let R = Object.create(null);
  for(var key in obj) {
    let iobj = obj[key];
    let r = callback(iobj,key);
    if(r!==undefined)
      R[key] = r;
  }
  return R;
}

/**
 * Returns whether `callback` evaluates to true for any property value
 * in obj.
 * @param {Array} obj
 * @param {(value: string, index: number, array: string[]) => boolean} callback
 */
function dsome(obj, callback) {
  return Object.keys(obj).some(callback);
}

/**
 * Callback of the forEach function called for each node it walks
 * @callback forEachCallback
 * @param {string} name of the node
 * @param {object} node
 */

/**
 * Loops over all elements in an object and calls the specified callback(key,obj)
 * @param {object} obj
 * @param {forEachCallback} callback
 */
function forEach(obj, callback) {
  for(var key in obj) {
    callback(key, obj[key]);
  }
}

/**
 * Callback of the forEachObject function called for each node it walks
 * @callback forEachObjectCallback
 * @param {string} name of the node
 * @param {object} node
 * @return false stops looping
 */

/**
 * Loops over all object-elements in an object and calls the specified callback
 * @param {object} obj
 * @param {forEachObjectCallback} callback
 */
function forEachObject(obj, callback) {
  for(var key in obj) {
    let iobj = obj[key];
    if(isObject(iobj)) {
      if(callback(key, iobj)===false)
        break; //early exit
    }
  }
}

/**
 * Callback of the forEachProp function called for each leaf it walks
 * @callback forEachPropCallback
 * @param {string} name of the node
 * @param {object} leaf
 * @return false stops looping
 */

/**
 * Loops over all leafs in an object and calls the specified callback
 * @param {object} obj
 * @param {forEachPropCallback} callback
 */
function forEachProp(obj, callback) {
  for(var key in obj) {
    let iobj = obj[key];
    if(!isObject(iobj)) {
      if(callback(key, iobj)===false)
        break; //early exit
    }
  }
}

module.exports = {
  dmap,
  dfilter,
  dfiltermap,
  dsome,
  forEach,
  forEachObject,
  forEachProp
}
