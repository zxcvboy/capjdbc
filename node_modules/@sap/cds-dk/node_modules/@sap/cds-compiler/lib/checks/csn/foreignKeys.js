'use strict';

// Only to be used with validator.js - a correct this value needs to be provided!

/**
 * Validate the foreign keys of a managed association
 *
 * - no usage of array-like fields as foreign keys (also not transitively)
 * - no usage of unmanaged association as foreign keys (also not transitively)
 *
 * @param {object} member Member
 */
function validateForeignKeys(member){
  const isManagedAssoc = (mem) => {
    // We have a managed association
    return mem && mem.target && !mem.on;
  };
  const isUnmanagedAssoc = (mem) => {
    // We have an unmanaged association
    return mem && mem.target && mem.on && !mem.keys;
  };

  // Declared as arrow-function to keep scope the same (this value)
  const handleAssociation = (mem) => {
    for(let i = 0; i < mem.keys.length; i++){
      if(mem.keys[i].ref){
        if(!mem.keys[i]._art) continue;
        checkForItems(mem.keys[i]._art);
      }
    }
  }
  // Declared as arrow-function to keep scope the same (this value)
  const handleStructured = (mem) => {
    let elementCount = 0;
    for(let elementName of Object.keys(mem.elements)){
      const element = mem.elements[elementName];
      checkForItems(element);
      elementCount++;
    }

    if(elementCount === 0){
      this.signal(this.error`Empty structured types/elements must not be used as foreign keys.`, member.$path);
    }
  }
  // Recursively perform the checks on an element
  // Declared as arrow-function to keep scope the same (this value)
  const checkForItems = (mem) => {
    if(mem.items){
      this.signal(this.error`Array-like properties must not be foreign keys`, member.$path);
    } else if(isUnmanagedAssoc(mem)){
      this.signal(this.error`Unmanaged association must not be a foreign key`, member.$path);
    } else if(mem.keys){
      handleAssociation(mem);
    } else if(mem.elements){
      handleStructured(mem);
    } else if(mem.type && mem.type.ref){ // type of
      checkForItems(this.artifactRef(mem.type));
    } else { // type T where T might contain items
      const type = this.csn.definitions[mem.type]
      if(type) {
        if(type.keys){
          handleAssociation(type);
        } else if(type.elements){
          handleStructured(type);
        }
      }
    }


  };

  if(isManagedAssoc(member)){
    checkForItems(member);
  }
}

module.exports = validateForeignKeys;
