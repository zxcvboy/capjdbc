'use strict';

// This file contains functions related to XSN/CSN-location objects.

/**
 * Create a location with location properties `filename` and `start` from
 * argument `start`, and location property `end` from argument `end`.
 */
function combinedLocation( start, end ) {
  return {
    filename: start.location.filename,
    start: start.location.start,
    end: end && end.location && end.location.end
  };
}

/**
 * Create an empty location object with the given file name.
 *
 * @param {string} filename
 * @returns {XSN.Location}
 */
function emptyLocation(filename) {
  return {
    filename,
    start: { offset: 0, line: 1, column: 1 },
    end: { offset: 0, line: 1, column: 1 },
  };
}

/**
 * Create an empty location object with the given file name.
 * The end line/column is not set and the location is therefore $weak.
 *
 * @param {string} filename
 * @returns {XSN.Location}
 */
function emptyWeakLocation(filename) {
  return {
    filename,
    start: { offset: 0, line: 1, column: 1 },
    $weak: true,
  };
}

/**
 * Returns a dummy location for built-in definitions.
 *
 * @returns {XSN.Location}
 */
function builtinLocation() {
  return emptyLocation('<built-in>');
}

/**
 * Normalize location: to old-style at the moment, TODO: should switch to new-style
 *
 * @param {object} loc CSN style location
 * @returns {XSN.Location}
 */
function normalizeLocation( loc ) {
  // `file` may be undefined, though it should not.
  // TODO: `loc` may also be a string from $location
  if (!loc || typeof loc !== 'object' || !('file' in loc))
    return loc;
  const location = {
    filename: loc.file,
    start: { line: loc.line || 0, column: loc.col || 0 },
    end: { line: loc.endLine || loc.line || 0, column: loc.endCol || loc.col || 0 },
  };
  if (!loc.endLine)
    location.$weak = true;
  return location;
}

/**
 * Return the source location of the complete dictionary `dict`.  If
 * `extraLocation` is truthy, also consider this location.
 * ASSUMPTION: all entries in the dictionary have a property `location` and
 * `location.filename` has always the same value.
 *
 * @param {object} dict
 * @param {XSN.Location} [extraLocation]
 * @returns {XSN.Location}
 */
function dictLocation( dict, extraLocation ) {
  if (!dict)
    return extraLocation;

  if (!(dict instanceof Array))
    dict = Object.getOwnPropertyNames( dict ).map( name => dict[name] );

  const locations = [].concat( ...dict.map( objLocations ) );
  if (extraLocation)
    locations.push( extraLocation );

  const min = locations.reduce( (a,b) => a.start.offset < b.start.offset ? a : b );
  const max = locations.reduce( (a,b) => (a.end || a.start).offset > (b.end || b.start).offset ? a : b );
  return { filename: min.filename, start: min.start, end: max.end };
}

function objLocations( obj ) {
  return (obj instanceof Array) ? obj.map( o => o.location ) : [ obj.location ];
}

module.exports = {
  combinedLocation,
  emptyLocation,
  emptyWeakLocation,
  builtinLocation,
  normalizeLocation,
  dictLocation,
};
