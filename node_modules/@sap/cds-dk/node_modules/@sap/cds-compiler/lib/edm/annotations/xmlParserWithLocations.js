'use strict';

const { emptyLocation } = require('../../base/location');
// https://www.npmjs.com/package/sax
const sax = require('sax');
// the true argument stands for 'strict', which means that the parser performs an XML Validation
const parser = sax.parser(true);

/* ======================================================
  Parses an XML input and creates a JS object.

  Example input:
  <root>
    <foo atr="some atribute">
      <bar atr1="bar1" atr2="bar2"/>
      <bar atr3="bar3" atr4="bar4"/>
    </foo>
    <foo>
      <bar atr_bar="yet another atr">
        <baz bazAtr="Hellooo">Some text</baz>
        <baf>Some other text</baf>
      </bar>
    </foo>
  </root>

  This will result in the following object:
  {
    root: [
      {
        _location: { ... },
        _name: 'root',
        _parent: { <root> },
        _selfClosing: false,
        foo: [
          {
            _attributes: { atr: 'some atribute' },
            _location: { ... },
            _name: 'foo'
            _parent: { <root> },
            _selfClosing: false,
            bar: [
              {
                _attributes: { atr1: 'bar1', atr2: 'bar2' },
                _location: { ... },
                _name: 'bar',
                _parent: { <foo> },
                _selfClosing: true,
              },
              {
                _attributes: { atr3: 'bar3', atr4: 'bar4' },
                _location: { ... },
                _name: 'bar',
                _parent: { <foo> },
                _selfClosing: true,
              }
            ]
          },
          {
            _location: { ... },
            _name: 'foo',
            _parent: { <root> },
            _selfClosing: false,
            bar: [
              {
                _attributes: { atr_bar: 'yet another atr' },
                _location: { ... },
                _name: 'bar',
                _parent: { <foo> },
                _selfClosing: false,
                baz: [
                  {
                    _attributes: { bazAtr: 'Hellooo' },
                    _location: { ... },
                    _name: 'baz',
                    _parent: { <bar> },
                    _selfClosing: false,
                    _text: 'Some text'
                  }
                ],
                baf: [
                  {
                    _location: { ... },
                    _name: 'baf',
                    _parent: { <bar> },
                    _selfClosing: false,
                    _text: 'Some other text'
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  }
======================================================== */
function parseXmlWithLocation(xml, filename) {
  let result = Object.create(null);
  let currentNode = result;
  let currentParent = result;
  let isRoot = true;

  parser.onerror = e => {
    throw Error('Error during xml parsing: ' + e.message);
  };

  parser.ontext = t => {
    if (t.trim()) {
      Object.defineProperty(currentNode, '_text', { value: t, enumerable: false });
    }
  };

  parser.onopentag = node => {
    if (isRoot) {
      currentParent[node.name] = [];
      currentNode = Object.create(null);
      currentParent[node.name].push(currentNode);
      isRoot = false;
    } else {
      if (!currentParent[node.name])
        currentParent[node.name] = [];
      currentNode = Object.create(null);
      currentParent[node.name].push(currentNode);
    }

    // assign the attributes which belong to the current tag
    if (Object.keys(node.attributes).length !== 0)
      Object.defineProperty(currentNode, '_attributes', { value: node.attributes, enumerable: false });

    // setup location of the current node
    let loc = emptyLocation(filename || '<input>');
    setStartPosition(loc.start, parser);
    Object.defineProperty(currentNode, '_location', { value: loc, enumerable: false });

    Object.defineProperty(currentNode, '_name', { value: node.name, enumerable: false });

    Object.defineProperty(currentNode, '_parent', { value: currentParent, enumerable: false });

    Object.defineProperty(currentNode, '_selfClosing', { value: node.isSelfClosing, enumerable: false });

    if (!parser.tag.isSelfClosing) {
      currentParent = currentNode;
    }
  };

  parser.onclosetag = () => {
    if (!parser.tag.isSelfClosing) {
      setEndPosition(currentParent._location.end, parser);
      currentParent = currentParent._parent;
    } else
      setEndPosition(currentNode._location.end, parser);
  };

  parser.write(xml).close();
  return result;

  function setStartPosition(start, parser) {
    start.line = parser.line + 1;
    start.offset = parser.startTagPosition;
    start.column = 1;
  }

  function setEndPosition(end, parser) {
    end.line = parser.line + 1;
    end.offset = parser.position;
    // TODO: check for the column with the compiler's location object
    end.column = parser.column + 1;
  }
}

module.exports = parseXmlWithLocation;
