const {
  forEachDefinition,
  forEachMember,
  hasBoolAnnotation
} = require('../model/csnUtils');


// TODO clarify API
function compareModels(beforeModel, afterModel, deltaMode=false) {
  const extensions = [];
  const addedDefinitions = Object.create(null);
  const removedDefinitions = Object.create(null);
  forEachDefinition(afterModel, getArtifactComparator(beforeModel, extensions, addedDefinitions, removedDefinitions));       // (, alerts(afterModel))

  if(!deltaMode){
    afterModel.extensions = extensions; // assuming that afterModel is nowhere needed in its original state
    return afterModel;
  } else {
    const returnObj = Object.create(null);
    returnObj.definitions = addedDefinitions;
    returnObj.extensions = extensions;
    returnObj.deletions = removedDefinitions;
    return returnObj;
  }
}

function getArtifactComparator(beforeModel, extensions, addedDefinitions, removedDefinitions) {                              // (, alerts)
  return function compareArtifacts(artifact, name) {                                   // (, topKey, path)   topKey == 'definitions'
    if (!isPersistedAsTable(artifact)) {
      // Will be handled automatically by HDI - might be needed for SQL
      removedDefinitions[name] = artifact;
      return;
    }

    const beforeArtifact = beforeModel.definitions[name];
    if (!beforeArtifact || !isPersistedAsTable(beforeArtifact)) {
      // Not needed for HDI - needed for SQL, for a "tight" delta
      addedDefinitions[name] = artifact;
      return;
    }

    const extensionsElements = {};
    forEachMember(artifact, getElementComparator(beforeArtifact, extensionsElements)); // (, alerts)

    if (Object.keys(extensionsElements).length === 0) {
      // No relevant elements have been added.
      return;
    }

    extensions.push({
      extend: name,
      elements: extensionsElements
    });
  };
}

function isPersistedAsTable(artifact) {
  return artifact.kind === 'entity'
      && !artifact._ignore
      && !artifact.abstract
      && (!artifact.query || hasBoolAnnotation(artifact, '@cds.persistence.table'))
      && !hasBoolAnnotation(artifact, '@cds.persistence.skip')
      && !hasBoolAnnotation(artifact, '@cds.persistence.exists');
}

function getElementComparator(beforeArtifact, extensionsElements) {                    // (, alerts)
  return function compareElements(element, name) {                                     // (, topKey, path)   topKey == 'elements'
    if (element._ignore) {
      return;
    }

    const beforeElement = beforeArtifact.elements[name];
    if (beforeElement && !beforeElement._ignore) {
      // Old element.
      return;
    }

    // TODO perhaps check these conditions elsewhere:                                  // if (element.notNull) {
                                                                                       //   alerts.signal(alerts.error`Elements with attribute 'not null' cannot be added`, path);
                                                                                       // }
                                                                                       // if (element.key) {
                                                                                       //   alerts.signal(alerts.error`Elements with attribute 'key' cannot be added`, path);
                                                                                       // }

    extensionsElements[name] = element;
  }
}

module.exports = {
  compareModels
};
