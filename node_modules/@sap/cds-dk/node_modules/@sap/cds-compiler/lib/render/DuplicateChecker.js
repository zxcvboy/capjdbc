/**
 * Usage: Create an instance to process artifacts which should be checked for collision.
 * First call addArtifact to specify the current artifact,
 * then call addElement to register the elements of the current artifact.
 * Finally call the "done" function to check for duplicates.
 * In addition the internal structures will be reinitialized to enable reuse of the instance.
 */

const walker = require('../json/walker')

  // database name - uppercase if not quoted
function asDBName(name) {
  return (name[0]=='"')
        ? name
        : name.toUpperCase();
}

/**
 * Check for duplicate artifacts or elements
 *
 * @class DuplicateChecker
 */
class DuplicateChecker{
  constructor(){
    this.seenArtifacts;
    this.currentArtifact;

    this.init();
  }

  /**
   * Initialize the state of the checker.
   *
   * @memberOf DuplicateChecker
   */
  init(){
    this.seenArtifacts = {};
    this.currentArtifact = {};
  }

  /**
   * Add an artifact to the "seen"-list
   *
   * @param {any} name
   * @param {any} location
   *
   * @memberOf DuplicateChecker
   */
  addArtifact( name, location, modelName ){
    const dbname = asDBName(name);
    this.currentArtifact = { name, location, elements: {}, modelName };
    if(!this.seenArtifacts[dbname])
      this.seenArtifacts[dbname] = [this.currentArtifact];
    else
      this.seenArtifacts[dbname].push(this.currentArtifact);
  }

  /**
   * Add an element to the "seen"-list
   *
   * @param {any} name
   * @param {any} location
   * @returns
   *
   * @memberOf DuplicateChecker
   */
  addElement(name,location, modelName){
    if(!this.currentArtifact.elements)
      return;
    const dbname = asDBName(name);
    let currentElements = this.currentArtifact.elements;
    const element = {name,location, modelName};
    if(!currentElements[dbname])
      currentElements[dbname] = [element];
    else
      currentElements[dbname].push(element);
  }

  /**
   * No more artifacts need to be processed, check for duplicates and re-init the object.
   *
   * @memberOf DuplicateChecker
   */
  check(signal, error){
    walker.forEach(this.seenArtifacts, (artifactName, artifacts) => {
      if(artifacts.length>1) {
        artifacts.forEach(artifact => { // report all colliding artifacts
          signal(error`Duplicated artifact '${artifactName}', origin: '${artifact.name}'`, ['definitions', artifact.modelName] );
        });
      }
      artifacts.forEach(artifact => {
        walker.forEach(artifact.elements, (elementName, elements) => {
          if(elements.length>1) {
            elements.forEach(element => { // report all colliding elements
              signal(error`Duplicated element '${element.name}' in artifact '${artifact.name}'`, ['definitions', artifact.modelName,'elements', element.modelName]);
            })
          }
        });
      });
    });
    //clean internal structures
    this.init();
  }
}

module.exports = DuplicateChecker;
