"use strict";
/* Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved. */
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FilterFunction = void 0;
var moment_1 = require("moment");
var filter_1 = require("./filter");
/**
 * Data structure to represent OData filter functions.
 * Use the factory function [[filterFunction]] to create instances of `FilterFunction`.
 */
var FilterFunction = /** @class */ (function () {
    /**
     * Creates an instance of FilterFunction.
     * @param functionName - Name of the function.
     * @param parameters - Representation of the parameters passed to the filter function.
     * @param edmType - EdmType of the return type of the filter function.
     */
    function FilterFunction(functionName, parameters, edmType) {
        this.functionName = functionName;
        this.parameters = parameters;
        this.edmType = edmType;
    }
    /**
     * @deprecated Since v1.21.0. There will be no replacement. Let us know if you were using this functionality.
     * Serializes the filter function into a string
     * @param parentFieldNames - Names of parents in case the function is part of a filter on a navigation property
     * @returns The filter function as string
     */
    FilterFunction.prototype.toString = function (parentFieldNames) {
        var _this = this;
        if (parentFieldNames === void 0) { parentFieldNames = []; }
        var params = this.parameters
            .map(function (param) { return _this.transformParameter(param, parentFieldNames); })
            .join(', ');
        return this.functionName + "(" + params + ")";
    };
    /**
     * Creates an instance of Filter for this filter function and the given value using the operator 'eq', i.e. `==`.
     *
     * @param value - Value to be used in the filter
     * @param edmType - EdmType of the value, used when converting the value to URL. Use `Edm.String` as default value.
     * @returns The resulting filter
     */
    FilterFunction.prototype.equals = function (value) {
        return new filter_1.Filter(this, 'eq', value, this.edmType);
    };
    /**
     * Creates an instance of Filter for this filter function and the given value using the operator 'ne', i.e. `!=`.
     *
     * @param value - Value to be used in the filter
     * @param edmType - EdmType of the value, used when converting the value to URL. Use `Edm.String` as default value.
     * @returns The resulting filter
     */
    FilterFunction.prototype.notEquals = function (value) {
        return new filter_1.Filter(this, 'ne', value, this.edmType);
    };
    /**
     * @deprecated Since v1.21.0. There will be no replacement. Let us know if you were using this functionality.
     * For different type of filter function parameters, build a function that generates a string as url pattern.
     * @param param - One parameter of the filter function
     * @param parentFieldNames - The parent field name list used when the field with navigation properties are involved
     * @returns A function that convert the parameter to url pattern.
     */
    FilterFunction.prototype.transformParameter = function (param, parentFieldNames) {
        if (typeof param === 'number') {
            return param.toString();
        }
        if (typeof param === 'string') {
            return "'" + param.replace(/'/g, "''") + "'";
        }
        if (moment_1.isMoment(param)) {
            throw new Error('Date parameters are not supported in the deprecated `transformParameter` method. Use `get-filter` instead.');
        }
        if (param instanceof FilterFunction) {
            return param.toString(parentFieldNames);
        }
        if (Array.isArray(param)) {
            throw new Error('Collection parameters are not supported in the deprecated `transformParameter` method. Use `get-filter` instead.');
        }
        return __spreadArrays(parentFieldNames, [param._fieldName]).join('/');
    };
    return FilterFunction;
}());
exports.FilterFunction = FilterFunction;
//# sourceMappingURL=filter-function-base.js.map