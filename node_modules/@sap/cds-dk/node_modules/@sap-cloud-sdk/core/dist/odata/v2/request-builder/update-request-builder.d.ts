import { Constructable, EntityIdentifiable, Selectable } from '../../common';
import { Entity } from '../entity';
import { MethodRequestBuilderBase } from '../../common/request-builder/request-builder-base';
import { ODataUpdateRequestConfig } from '../../common/request/odata-update-request-config';
import { DestinationOptions } from '../../../scp-cf';
import { Destination, DestinationNameAndJwt } from '../../../scp-cf/destination-service-types';
/**
 * Create OData query to update an entity.
 *
 * @typeparam EntityT - Type of the entity to be updated
 */
export declare class UpdateRequestBuilder<EntityT extends Entity> extends MethodRequestBuilderBase<ODataUpdateRequestConfig<EntityT>> implements EntityIdentifiable<EntityT> {
    readonly _entityConstructor: Constructable<EntityT>;
    readonly _entity: EntityT;
    private ignored;
    private required;
    /**
     * Creates an instance of UpdateRequestBuilder.
     *
     * @param _entityConstructor - Constructor type of the entity to be updated
     * @param _entity - Entity to be updated
     */
    constructor(_entityConstructor: Constructable<EntityT>, _entity: EntityT);
    /**
     * Builds the payload and the entity keys of the query.
     *
     * @returns the builder itself
     */
    prepare(): this;
    /**
     * Executes the query.
     *
     * @param destination - Destination to execute the request against
     * @param options - Options to employ when fetching destinations
     * @returns A promise resolving to the entity once it was updated
     */
    execute(destination: Destination | DestinationNameAndJwt, options?: DestinationOptions): Promise<EntityT>;
    /**
     * Explicitly configure 'PUT' as the method of the update request. By default, only the properties that have changed compared to the last known remote state are sent using 'PATCH', while with 'PUT', the whole entity is sent.
     *
     * @returns The entity itself, to facilitate method chaining
     */
    replaceWholeEntityWithPut(): this;
    /**
     * Specifies required entity keys for the update request.
     *
     * @param fields - Enumeration of the fields to be required
     * @returns The entity itself, to facilitate method chaining
     */
    requiredFields(...fields: Selectable<EntityT>[]): this;
    /**
     * Specifies entity fields to ignore by the update request.
     *
     * @param fields - Enumeration of the fields to be ignored
     * @returns The entity itself, to facilitate method chaining
     */
    ignoredFields(...fields: Selectable<EntityT>[]): this;
    /**
     * Instructs the request to force an overwrite of the entity by sending an 'If-Match: *' header instead of sending the ETag version identifier.
     *
     * @returns this The request itself to ease chaining while executing the request
     */
    ignoreVersionIdentifier(): this;
    /**
     * Specifies a custom ETag version identifier of the entity to update.
     *
     * @param etag - Custom ETag version identifier to be sent in the header of the request
     * @returns The request itself to ease chaining while executing the request
     */
    withCustomVersionIdentifier(etag: string): this;
    private getUpdateBody;
    private serializedDiff;
    private removeNavPropsAndComplexTypes;
    private removeKeyFields;
    private removeIgnoredFields;
    private addRequiredFields;
    private getKeyFieldNames;
    private toSet;
    private isEmptyObject;
}
//# sourceMappingURL=update-request-builder.d.ts.map