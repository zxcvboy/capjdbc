import { MapType } from '@sap-cloud-sdk/util';
import { Destination } from '../../../scp-cf';
import { HttpResponse } from '../../../http-client';
import { ODataRequestConfig } from './odata-request-config';
/**
 * OData request configuration for an entity type.
 *
 * @typeparam EntityT - Type of the entity to setup a request for
 */
export declare class ODataRequest<RequestConfigT extends ODataRequestConfig> {
    config: RequestConfigT;
    private _destination?;
    /**
     * Creates an instance of ODataRequest.
     *
     * @param config - Configuration of the request
     * @param _destination - Destination to setup the request against
     * @memberof ODataRequest
     */
    constructor(config: RequestConfigT, _destination?: Destination | undefined);
    set destination(dest: Destination | undefined);
    get destination(): Destination | undefined;
    /**
     * Constructs the url for the request at hand.
     *
     * @returns The url for the request
     */
    url(): string;
    /**
     * Constructs the relative url for the batch request.
     *
     * @returns The relative url for the batch request
     */
    relativeUrl(): string;
    /**
     * Specifies whether the destination needs a specific authentication or not.
     *
     * @returns A boolean value that specifies whether the destination needs authentication or not
     * @memberof ODataRequest
     */
    needsAuthentication(): boolean;
    /**
     * Returns the service URL for a given OData request.
     *
     * @returns The URL of the service the given entity belongs to
     */
    serviceUrl(): string;
    /**
     * Returns the relative service URL for a given OData request.
     *
     * @returns The relative URL of the service the given entity belongs to
     */
    relativeServiceUrl(): string;
    /**
     * Returns the URL to a specific OData resource, i.e. the entity collection.
     *
     * @returns The URL of the resource
     */
    resourceUrl(): string;
    /**
     * Returns the relative URL to a specific OData resource.
     *
     * @returns The relative URL of the resource
     */
    relativeResourceUrl(): string;
    /**
     * Get query parameters as string. Leads with `?` if  there are parameters to return.
     *
     * @returns Query parameter string
     */
    query(): string;
    /**
     * Create object containing all headers, including custom headers for the given request.
     *
     * @returns Key-value pairs where the key is the name of a header property and the value is the respective value
     */
    headers(): Promise<MapType<string>>;
    /**
     * Execute the given request and return the according promise.
     *
     * @returns Promise resolving to the requested data
     */
    execute(): Promise<HttpResponse>;
    private getETagHeader;
    private getCsrfHeaders;
}
//# sourceMappingURL=odata-request.d.ts.map