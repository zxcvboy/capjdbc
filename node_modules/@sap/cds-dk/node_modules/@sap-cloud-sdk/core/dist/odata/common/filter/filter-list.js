"use strict";
/* Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved. */
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isFilterList = exports.FilterList = void 0;
/**
 * Data structure to combine [[Filterable]]s conjunctively and / or disjunctively. A FilterList matches when all filterables within the `andFilters` match and when at least one filterable within the `orFilters` matches. Should not be used directly.
 *
 * @typeparam EntityT -
 */
var FilterList = /** @class */ (function () {
    /**
     * Creates an instance of FilterList.
     *
     * @param andFilters - Filters to be combined by logical conjunction (`and`)
     * @param orFilters - Filters to be combined by logical disjunction (`or`)
     */
    function FilterList(andFilters, orFilters) {
        if (andFilters === void 0) { andFilters = []; }
        if (orFilters === void 0) { orFilters = []; }
        this.andFilters = andFilters;
        this.orFilters = orFilters;
    }
    /**
     * Flattens `andFilters` and `orFilters` as far as possible while staying logically equivalent.
     *
     * @returns Flattened filter list
     */
    FilterList.prototype.flatten = function () {
        this._flatten('andFilters');
        this._flatten('orFilters');
        return this;
    };
    FilterList.prototype.canFlatten = function (property) {
        var otherProperty = property === 'andFilters' ? 'orFilters' : 'andFilters';
        return this[property].some(function (filter) {
            return filter instanceof FilterList &&
                (!filter.isEmpty(property) || filter.isEmpty(otherProperty));
        });
    };
    FilterList.prototype.isEmpty = function (property) {
        return !this[property].length;
    };
    FilterList.prototype._flatten = function (property) {
        var otherProperty = property === 'andFilters' ? 'orFilters' : 'andFilters';
        while (this.canFlatten(property)) {
            this[property] = this[property].reduce(function (flatList, current) {
                if (current instanceof FilterList) {
                    var flattendFilters = __spreadArrays(flatList, current[property]);
                    if (current[otherProperty].length) {
                        current[property] = [];
                        flattendFilters.push(current.flatten());
                    }
                    return flattendFilters;
                }
                return __spreadArrays(flatList, [current]);
            }, []);
        }
    };
    return FilterList;
}());
exports.FilterList = FilterList;
function isFilterList(filterable) {
    return (typeof filterable['field'] === 'undefined' &&
        typeof filterable['operator'] === 'undefined' &&
        typeof filterable['value'] === 'undefined' &&
        typeof filterable['flatten'] === 'function');
}
exports.isFilterList = isFilterList;
//# sourceMappingURL=filter-list.js.map