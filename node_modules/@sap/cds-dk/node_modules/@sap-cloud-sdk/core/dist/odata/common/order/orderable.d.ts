import { EntityBase } from '../entity';
import { Link, SimpleTypeFields } from '../selectable';
import { ComplexTypePropertyFields } from '../selectable/complex-type-property-fields';
import { Order } from './order';
import { OrderLink } from './order-link';
/**
 * A union of all types that can be used for ordering.
 *
 * @typeparam EntityT - Type of the entity to be ordered
 */
export declare type Orderable<EntityT extends EntityBase> = Order<EntityT> | OrderLink<EntityT, EntityBase>;
/**
 * A union of all types that can be used as input for ordering.
 *
 * @typeparam EntityT - Type of the entity to be ordered
 */
export declare type OrderableInput<EntityT extends EntityBase> = SimpleTypeFields<EntityT> | Link<EntityT, EntityBase> | ComplexTypePropertyFields<EntityT, any>;
/**
 * Create new Order by `orderBy._fieldName` in ascending order.
 *
 * @typeparam EntityT - Type of the entity to be ordered
 * @param orderBy - Field or link to be ordered by
 * @returns New order
 */
export declare function asc<EntityT extends EntityBase>(orderBy: OrderableInput<EntityT>): Order<EntityT>;
/**
 * Create new Order by `orderBy._fieldName` in descending order.
 *
 * @typeparam EntityT - Type of the entity to be ordered
 * @param orderBy - Field or link to be ordered by
 * @returns New order
 */
export declare function desc<EntityT extends EntityBase>(orderBy: OrderableInput<EntityT>): Order<EntityT>;
//# sourceMappingURL=orderable.d.ts.map