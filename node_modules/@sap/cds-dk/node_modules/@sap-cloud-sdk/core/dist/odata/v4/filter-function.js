"use strict";
/* Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved. */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.filterFunction = void 0;
var filter_function_1 = require("../common/filter/filter-function");
var collection_filter_function_1 = require("../common/filter/collection-filter-function");
var date_filter_function_1 = require("./date-filter-function");
/**
 * Build a custom filter function.
 * @param functionName - the name of the function, e.g., `substring`
 * @param returnType - the return type of the filter function
 * @param parameters - the parameter(s) used in the function
 * @returns An instance of filter function suited for the given return type
 */
function filterFunction(functionName, returnType) {
    var parameters = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        parameters[_i - 2] = arguments[_i];
    }
    if (returnType === 'datetimeoffset') {
        return new date_filter_function_1.DateFilterFunction(functionName, parameters);
    }
    if (isCollectionReturnType(returnType)) {
        var edmType = returnTypeMapping[returnType.replace('[]', '')];
        if (edmType) {
            return new collection_filter_function_1.CollectionFilterFunction(functionName, parameters, edmType);
        }
        throw new Error("Cannot create filter function for unknown return type " + returnType + ".");
    }
    return filter_function_1.createFilterFunction.apply(void 0, __spreadArrays([functionName, returnType], parameters));
}
exports.filterFunction = filterFunction;
function isCollectionReturnType(returnType) {
    return returnType.endsWith('[]');
}
var returnTypeMapping = __assign({ datetimeoffset: 'Edm.DateTimeOffset', boolean: 'Edm.Boolean', string: 'Edm.String' }, filter_function_1.numberReturnTypeMapping);
//# sourceMappingURL=filter-function.js.map