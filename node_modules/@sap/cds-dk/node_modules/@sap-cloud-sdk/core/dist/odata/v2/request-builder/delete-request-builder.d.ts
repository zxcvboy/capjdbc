import { MapType } from '@sap-cloud-sdk/util';
import { Constructable, EntityIdentifiable, FieldType } from '../../common';
import { MethodRequestBuilderBase } from '../../common/request-builder/request-builder-base';
import { ODataDeleteRequestConfig } from '../../common/request/odata-delete-request-config';
import { Entity } from '../entity';
import { DestinationOptions } from '../../../scp-cf';
import { Destination, DestinationNameAndJwt } from '../../../scp-cf/destination-service-types';
/**
 * Create OData query to delete an entity.
 *
 * @typeparam EntityT - Type of the entity to be deleted
 */
export declare class DeleteRequestBuilder<EntityT extends Entity> extends MethodRequestBuilderBase<ODataDeleteRequestConfig<EntityT>> implements EntityIdentifiable<EntityT> {
    readonly _entityConstructor: Constructable<EntityT>;
    readonly _entity: EntityT;
    /**
     * Creates an instance of DeleteRequestBuilder. If the entity is passed, version identifier will also be added.
     *
     * @param entityConstructor - Constructor type of the entity to be deleted
     * @param keysOrEntity - Entity or Key-value pairs of key properties for the given entity
     */
    constructor(entityConstructor: Constructable<EntityT>, keysOrEntity: MapType<FieldType> | Entity);
    /**
     * Add ETag version identifier in the delete request header.
     *
     * @param etag - The version identifier of the entity
     * @returns The builder itself, to facilitate method chaining
     */
    setVersionIdentifier(etag: string): this;
    /**
     * Instructs the request to force an overwrite of the entity by sending an 'If-Match: *' header instead of sending the ETag version identifier.
     *
     * @returns this The request itself to ease chaining while executing the request
     */
    ignoreVersionIdentifier(): this;
    /**
     * Execute query.
     *
     * @param destination - Destination to execute the request against
     * @param options - Options to employ when fetching destinations
     * @returns A promise resolving once the entity was deleted
     */
    execute(destination: Destination | DestinationNameAndJwt, options?: DestinationOptions): Promise<void>;
}
//# sourceMappingURL=delete-request-builder.d.ts.map