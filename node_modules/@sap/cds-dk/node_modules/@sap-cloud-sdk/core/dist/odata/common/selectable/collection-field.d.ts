import { EntityBase } from '../entity';
import { EdmTypeShared } from '../edm-types';
import { SelectableEdmTypeField } from './edm-type-field';
import { Field } from './field';
import { ComplexTypeNamespace } from './complex-type-namespace';
import { ConstructorOrField } from './constructor-or-field';
/**
 * @experimental This is experimental and is subject to change. Use with caution.
 *
 * Represents a static field of an entity or complex type.
 *
 * @typeparam EntityT - Type of the entity the field belongs to
 * @typeparam FieldT - Type of the entries of the collection in the field
 */
export declare class CollectionField<EntityT extends EntityBase, FieldT extends EdmTypeShared<'any'> | Record<string, any> = any> extends Field<EntityT> implements SelectableEdmTypeField {
    readonly _fieldType: FieldT | ComplexTypeNamespace<FieldT>;
    readonly selectable: true;
    /**
     * @experimental This is experimental and is subject to change. Use with caution.
     *
     * Creates an instance of CollectionField.
     *
     * @param fieldName - Actual name of the field used in the OData request.
     * @param fieldOf - The constructor of the entity or the complex type field this field belongs to.
     * @param _fieldType - Type of the field according to the metadata description.
     */
    constructor(fieldName: string, fieldOf: ConstructorOrField<EntityT>, _fieldType: FieldT | ComplexTypeNamespace<FieldT>);
}
//# sourceMappingURL=collection-field.d.ts.map