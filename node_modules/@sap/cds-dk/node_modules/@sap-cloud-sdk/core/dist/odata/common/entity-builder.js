"use strict";
/* Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved. */
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityBuilder = void 0;
var util_1 = require("@sap-cloud-sdk/util");
var util_2 = require("../../util");
var logger = util_1.createLogger({
    package: 'core',
    messageContext: 'entity-builder'
});
/**
 * @hidden
 */
var EntityBuilder = /** @class */ (function () {
    function EntityBuilder(_entityConstructor) {
        this._entityConstructor = _entityConstructor;
        if (!this.entity) {
            this.entity = new this._entityConstructor();
        }
    }
    /**
     * Sets the custom fields for the entity.
     *
     * @param customFields - The custom fields you want to add.
     * @returns The entity builder itself for method chaining
     */
    EntityBuilder.prototype.withCustomFields = function (customFields) {
        var validCustomFields = this.filterCustomFields(customFields);
        this.entity = this.entity.initializeCustomFields(validCustomFields);
        return this;
    };
    /**
     * Builds the entity.
     *
     * @returns The entity.
     */
    EntityBuilder.prototype.build = function () {
        var entity = this.entity;
        this.entity = new this._entityConstructor();
        return entity;
    };
    /**
     * Builds an entity from JSON representation.
     * If you have obtained the JSON as a request payload use the [[deserializeEntity]] methods.
     * Note that fields not mappable to a field in the target entity are silently ignored.
     * @param json - Representation of the entity in JSON format.
     * @returns Entity constructed from JSON representation.
     */
    EntityBuilder.prototype.fromJson = function (json) {
        var entityBuilder = this._entityConstructor.builder();
        Object.entries(json).forEach(function (_a) {
            var key = _a[0], value = _a[1];
            if (typeof entityBuilder[key] === 'function') {
                entityBuilder[key](value);
            }
            if (key === '_customFields') {
                entityBuilder.withCustomFields(value);
            }
        });
        return entityBuilder.build();
    };
    EntityBuilder.prototype.filterCustomFields = function (customFields) {
        var _this = this;
        return Object.keys(customFields).reduce(function (validCfs, cf) {
            if (!_this._entityConstructor[util_2.toStaticPropertyFormat(cf)]) {
                validCfs[cf] = customFields[cf];
            }
            logger.warn("Field name \"" + cf + "\" is already existing in \"" + toClassName(_this._entityConstructor._entityName) + "\" and thus cannot be defined as custom field. ");
            return validCfs;
        }, {});
    };
    return EntityBuilder;
}());
exports.EntityBuilder = EntityBuilder;
function toClassName(entityName) {
    return entityName.substr(entityName.indexOf('_') + 1);
}
//# sourceMappingURL=entity-builder.js.map