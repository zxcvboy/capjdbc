"use strict";
/* Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved. */
/* eslint-disable valid-jsdoc */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.serializersCommom = exports.deserializersCommon = exports.fromNumberToEdm = exports.fromEdmToNumber = exports.toGuid = void 0;
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var rambda_1 = require("rambda");
var toNumber = function (value) { return Number(value); };
var toBigNumber = function (value) { return new bignumber_js_1.default(value); };
exports.toGuid = function (value) {
    var guids = /[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}/.exec(value);
    if (!guids || guids.length <= 0) {
        throw new Error("Failed to parse the value: " + value + " to guid.");
    }
    return guids[0];
};
var fromBigNumber = function (value) {
    return value.toString();
};
/**
 * @hidden
 */
function fromEdmToNumber(value) {
    if (typeof value === 'number') {
        return value;
    }
    if (value.toLowerCase() === 'inf') {
        return Number.POSITIVE_INFINITY;
    }
    if (value.toLowerCase() === '-inf') {
        return Number.NEGATIVE_INFINITY;
    }
    if (value.toLowerCase() === 'nan') {
        return Number.NaN;
    }
    var num = Number(value);
    if (Number.isNaN(num)) {
        throw new Error("Edm->TS: Cannot create number from input \"" + value + "\"");
    }
    return num;
}
exports.fromEdmToNumber = fromEdmToNumber;
/**
 * @hidden
 */
function fromNumberToEdm(value) {
    if (value === Number.POSITIVE_INFINITY) {
        return 'INF';
    }
    if (value === Number.NEGATIVE_INFINITY) {
        return '-INF';
    }
    if (Number.isNaN(value)) {
        return 'NaN';
    }
    if (typeof value === 'number') {
        return value;
    }
    throw new Error("TS->edm: Cannot create number from input \"" + value + "\"");
}
exports.fromNumberToEdm = fromNumberToEdm;
exports.deserializersCommon = {
    'Edm.Binary': rambda_1.identity,
    'Edm.Boolean': rambda_1.identity,
    'Edm.Byte': toNumber,
    'Edm.Decimal': toBigNumber,
    'Edm.Double': fromEdmToNumber,
    'Edm.Float': fromEdmToNumber,
    'Edm.Int16': toNumber,
    'Edm.Int32': toNumber,
    'Edm.Int64': toBigNumber,
    'Edm.Guid': exports.toGuid,
    'Edm.SByte': toNumber,
    'Edm.Single': fromEdmToNumber,
    'Edm.String': rambda_1.identity
};
exports.serializersCommom = {
    'Edm.Binary': rambda_1.identity,
    'Edm.Boolean': rambda_1.identity,
    'Edm.Byte': toNumber,
    'Edm.Decimal': fromBigNumber,
    'Edm.Double': fromNumberToEdm,
    'Edm.Float': fromNumberToEdm,
    'Edm.Int16': toNumber,
    'Edm.Int32': toNumber,
    'Edm.Int64': fromBigNumber,
    'Edm.Guid': rambda_1.identity,
    'Edm.SByte': toNumber,
    'Edm.Single': fromNumberToEdm,
    'Edm.String': rambda_1.identity
};
//# sourceMappingURL=payload-value-converter.js.map