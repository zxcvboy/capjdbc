import { ODataVersion } from '@sap-cloud-sdk/util';
import { EdmTypeShared } from '../edm-types';
import { Constructable, EntityBase } from '../entity';
import { Field } from './field';
import { ComplexTypeNamespace } from './complex-type-namespace';
import { ConstructorOrField } from './constructor-or-field';
/**
 * Represents a complex type property of an entity.
 *
 * `ComplexTypeField`s are used as static properties of entities and are generated from the metadata, i.e. for each property of
 * an OData entity, that has a complex type, there exists one static instance of `ComplexTypeField` (or rather one of its subclasses) in the corresponding generated class file.
 * `ComplexTypeField`s are used to represent the domain of complex or custom structures that can be used in select, filter and order by functions.
 * For example, when constructing a query on the TimeSheetEntry entity, an instance of `ComplexTypeField<TimeSheetEntry>`
 * can be supplied as argument to the select function, e.g. `TimeSheetEntry.TIME_SHEET_DATA_FIELDS`.
 * Moreover, classes implementing this abstract class will provide property fields, that can be used for filtering and ordering.
 *
 * See also: [[Selectable]]
 *
 * @typeparam EntityT - Type of the entity the field belongs to
 */
export declare abstract class ComplexTypeField<EntityT extends EntityBase, ComplexT = any> extends Field<EntityT> {
    readonly fieldOf: ConstructorOrField<EntityT, ComplexT>;
    /**
     * @hidden
     * Note that this property is crucial, although not really used.
     * If it is removed this class becomes structural equivalent to e.g. ComplexTypeStringPropertyField which leads to unexpected behavior on the `selectable` list of objects.
     */
    readonly complexTypeName?: string;
    /**
     * The complex type of the complex type property represented by this.
     */
    readonly _complexType: ComplexTypeNamespace<ComplexT>;
    /**
     * Creates an instance of ComplexTypeField.
     *
     * @param fieldName - Actual name of the field as used in the OData request.
     * @param fieldOf - Either the parent entity constructor of the parent complex type this field belongs to.
     * @param complexType - The complex type of the complex type property represented by this.
     */
    constructor(fieldName: string, fieldOf: ConstructorOrField<EntityT, ComplexT>, complexType?: ComplexTypeNamespace<ComplexT>);
    /**
     * @deprecated Since v1.19.0.
     *
     * Creates an instance of ComplexTypeField.
     *
     * @param fieldName - Actual name of the field as used in the OData request.
     * @param entityConstructor - Constructor type of the entity the field belongs to.
     * @param complexTypeName - Name of the type of the field according to the metadata description.
     */
    constructor(fieldName: string, entityConstructor: Constructable<EntityT>, complexTypeName: string);
    /**
     * Gets the path to the complex type property represented by this.
     * @returns The path to the complex type property.
     */
    fieldPath(): string;
}
/**
 * Convenience method to get the entity constructor of the parent of a complex type.
 *
 * @param fieldOf - Either an entity constructor or another complex type field.
 * @returns The constructor of the transitive parent entity;
 */
export declare function getEntityConstructor<EntityT extends EntityBase, ComplexT>(fieldOf: ConstructorOrField<EntityT, ComplexT>): Constructable<EntityT>;
/**
 * Convenience method to get the [[EdmTypeShared]] from the overloaded constructor.
 * @param complexTypeNameOrEdmType - Either the name of the complex type or the EdmType
 * @param edmTypeOrUndefined - Either the EdmType or undefined.
 * @returns EdmType
 */
export declare function getEdmType<T extends ODataVersion>(complexTypeNameOrEdmType: string | EdmTypeShared<T>, edmTypeOrUndefined?: EdmTypeShared<T>): EdmTypeShared<T>;
//# sourceMappingURL=complex-type-field.d.ts.map