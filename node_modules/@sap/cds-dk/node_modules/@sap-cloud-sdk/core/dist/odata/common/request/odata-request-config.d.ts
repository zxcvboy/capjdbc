import { MapType } from '@sap-cloud-sdk/util';
export declare type RequestMethodType = 'get' | 'post' | 'patch' | 'delete' | 'put';
/**
 * @hidden
 */
export declare abstract class ODataRequestConfig {
    method: RequestMethodType;
    readonly defaultServicePath: string;
    readonly contentType: string;
    payload: MapType<any> | string;
    customServicePath: string;
    private _customHeaders;
    private _customQueryParameters;
    /**
     * Creates an instance of ODataRequest.
     *
     * @param method - HTTP method of the request
     * @param defaultServicePath - default path of the according service
     * @param contentType - The content type of the request
     */
    constructor(method: RequestMethodType, defaultServicePath: string, contentType?: string);
    set customHeaders(headers: MapType<string>);
    get customHeaders(): MapType<string>;
    set customQueryParameters(queryParameters: MapType<string>);
    get customQueryParameters(): MapType<string>;
    /**
     * Add custom headers to the request. This is useful in case you want to provide your own authorization headers for example.
     *
     * @param headers - Key-value pairs where the key is the name of a header property and the value is the respective value
     */
    addCustomHeaders(headers: MapType<string>): void;
    /**
     * Add custom query parameters to the request. This is useful in case your OData service allows non-standard query parameters.
     *
     * @param queryParameters - Key-value pairs where the key is the name of a query parameter and the value is the respective value
     */
    addCustomQueryParameters(queryParameters: MapType<string>): void;
    protected prependDollarToQueryParameters(params: MapType<any>): MapType<any>;
    /**
     * @hidden
     */
    abstract resourcePath(): string;
    /**
     * @hidden
     */
    abstract queryParameters(): MapType<any>;
}
//# sourceMappingURL=odata-request-config.d.ts.map