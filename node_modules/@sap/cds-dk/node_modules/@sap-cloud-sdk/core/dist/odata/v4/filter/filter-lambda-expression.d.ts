import { FieldType } from '../../common/selectable';
import { Filterable } from '../../common/filter';
import { EntityBase } from '../../common';
import { OneToManyLink } from '../../common/selectable/one-to-many-link';
import { FilterLambdaExpression } from '../../common/filter/filter-lambda-expression';
/**
 * @experimental This is experimental and is subject to change. Use with caution.
 */
export declare function any<EntityT extends EntityBase, LinkedEntityT extends EntityBase>(...filters: (Filterable<EntityT> | OneToManyLink<EntityT, LinkedEntityT>)[]): FilterLambdaExpression<EntityT, FieldType>;
/**
 * @experimental This is experimental and is subject to change. Use with caution.
 */
export declare function all<EntityT extends EntityBase, LinkedEntityT extends EntityBase>(...filters: (Filterable<EntityT> | OneToManyLink<EntityT, LinkedEntityT>)[]): FilterLambdaExpression<EntityT, FieldType>;
//# sourceMappingURL=filter-lambda-expression.d.ts.map