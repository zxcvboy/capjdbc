"use strict";
/* Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved. */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DestinationSelectionStrategies = exports.subscriberFirst = exports.alwaysSubscriber = exports.alwaysProvider = void 0;
/**
 * Constraints the selection to provider destinations.
 *
 * @param allDestinations - Retrieved destinations
 * @param destinationName - Name of the destination to retrieve
 * @returns the destination to retrieve, returns null if no matched provider destination is found
 */
function alwaysProvider(allDestinations, destinationName) {
    var isRequestedDestination = function (destination) {
        return destination.name === destinationName;
    };
    return (allDestinations.provider.instance.find(isRequestedDestination) ||
        allDestinations.provider.subaccount.find(isRequestedDestination) ||
        null);
}
exports.alwaysProvider = alwaysProvider;
/**
 * Constraints the selection to subscriber destinations.
 *
 * @param allDestinations - Retrieved destinations
 * @param destinationName - Name of the destination to retrieve
 * @returns the destination to retrieve, returns null if no matched subscriber destination is found
 */
function alwaysSubscriber(allDestinations, destinationName) {
    var isRequestedDestination = function (destination) {
        return destination.name === destinationName;
    };
    return (allDestinations.subscriber.instance.find(isRequestedDestination) ||
        allDestinations.subscriber.subaccount.find(isRequestedDestination) ||
        null);
}
exports.alwaysSubscriber = alwaysSubscriber;
/**
 * Prioritizes the selection of subscriber destinations.
 *
 * @param allDestinations - Retrieved destinations
 * @param destinationName - Name of the destination to retrieve
 * @returns the destination to retrieve, returns null if no matched destination is found
 */
function subscriberFirst(allDestinations, destinationName) {
    var isRequestedDestination = function (destination) {
        return destination.name === destinationName;
    };
    return (allDestinations.subscriber.instance.find(isRequestedDestination) ||
        allDestinations.subscriber.subaccount.find(isRequestedDestination) ||
        allDestinations.provider.instance.find(isRequestedDestination) ||
        allDestinations.provider.subaccount.find(isRequestedDestination) ||
        null);
}
exports.subscriberFirst = subscriberFirst;
/**
 * Selector of destination selection strategies. See [[alwaysProvider]], [[alwaysSubscriber]] and [[subscriberFirst]] for more information available selection strategies.
 */
exports.DestinationSelectionStrategies = {
    alwaysProvider: alwaysProvider,
    alwaysSubscriber: alwaysSubscriber,
    subscriberFirst: subscriberFirst
};
//# sourceMappingURL=destination-selection-strategies.js.map