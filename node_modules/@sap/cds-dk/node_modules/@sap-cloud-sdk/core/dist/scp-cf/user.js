"use strict";
/* Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved. */
Object.defineProperty(exports, "__esModule", { value: true });
exports.userFromJwt = exports.mapping = void 0;
var util_1 = require("../util");
/**
 * Mapping between key name in the User and key name in decoded JWT and the
 */
exports.mapping = {
    id: { keyInJwt: 'user_id', extractorFunction: util_1.userId },
    userName: { keyInJwt: 'user_name', extractorFunction: util_1.userName },
    givenName: { keyInJwt: 'given_name', extractorFunction: util_1.userGivenName },
    familyName: { keyInJwt: 'family_name', extractorFunction: util_1.userFamilyName },
    email: { keyInJwt: 'email', extractorFunction: util_1.userEmail },
    scopes: { keyInJwt: 'scope', extractorFunction: util_1.userScopes },
    customAttributes: {
        keyInJwt: 'xs.user.attributes',
        extractorFunction: util_1.customAttributes
    }
};
function hasScopeWrapper(scopes) {
    return function (scope) {
        return scopes.find(function (scopeFromList) { return scopeFromList.name === scope.name; }) !==
            undefined;
    };
}
/**
 * Creates a user object from the decoded JWT.
 *
 * @param decodedJWT - Decoded JWT toeken
 * @returns Representation of the user
 * @exception Error Raised if no id is found in the decoded JWT.
 */
function userFromJwt(decodedJWT) {
    util_1.checkMandatoryValue('id', exports.mapping, decodedJWT);
    util_1.checkMandatoryValue('userName', exports.mapping, decodedJWT);
    return {
        id: util_1.userId(decodedJWT),
        givenName: util_1.userGivenName(decodedJWT),
        familyName: util_1.userFamilyName(decodedJWT),
        email: util_1.userEmail(decodedJWT),
        userName: util_1.userName(decodedJWT),
        scopes: util_1.userScopes(decodedJWT),
        customAttributes: util_1.customAttributes(decodedJWT),
        hasScope: hasScopeWrapper(util_1.userScopes(decodedJWT))
    };
}
exports.userFromJwt = userFromJwt;
//# sourceMappingURL=user.js.map