"use strict";
/* Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved. */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDestinationFromDestinationService = exports.getDestination = exports.getDestinationOptions = exports.useOrFetchDestination = void 0;
var util_1 = require("@sap-cloud-sdk/util");
var jwt_1 = require("../util/jwt");
var proxy_util_1 = require("../util/proxy-util");
var cache_1 = require("./cache");
var connectivity_service_1 = require("./connectivity-service");
var destination_1 = require("./destination");
var destination_cache_1 = require("./destination-cache");
var destination_selection_strategies_1 = require("./destination-selection-strategies");
var destination_service_1 = require("./destination-service");
var destination_service_types_1 = require("./destination-service-types");
var env_destination_accessor_1 = require("./env-destination-accessor");
var environment_accessor_1 = require("./environment-accessor");
var token_accessor_1 = require("./token-accessor");
var vcap_service_destination_1 = require("./vcap-service-destination");
var logger = util_1.createLogger({
    package: 'core',
    messageContext: 'destination-accessor'
});
/**
 * Returns the parameter if it is a destination, calls [[getDestination]] otherwise (which will try to fetch the destination
 * from the Cloud Foundry destination service).
 *
 * Fetching a destination requires:
 * - a binding to exactly one XSUAA service instance with service plan "application"
 * - a binding to a destination service instance
 *
 * If either of the prerequisites is not met or one of the services returns an error, this function will either throw an error or return a promise that rejects.
 *
 * @param destination - A destination or the necessary parameters to fetch one.
 * @param options - Caching options by fetching destination.
 * @returns A promise resolving to the requested destination on success.
 */
function useOrFetchDestination(destination, options) {
    if (options === void 0) { options = {}; }
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, destination_service_types_1.isDestinationNameAndJwt(destination)
                    ? getDestination(destination.destinationName, __assign({ userJwt: destination.jwt }, options))
                    : destination_1.sanitizeDestination(destination)];
        });
    });
}
exports.useOrFetchDestination = useOrFetchDestination;
/**
 * @deprecated Since v1.0.1. Use [[getDestination]] instead.
 *
 * Retrieves a destination with the given name from the Cloud Foundry destination service.
 * Returns null if no destination can be found.
 * Requires the following service bindings: destination, XSUAA
 * By default, selects subscriber over provider and instance over subaccount destinations.
 *
 * If the destinations are read from the environment, the jwt will be ignored.
 *
 * @param name - The name of the destination to be retrieved.
 * @param options - The options of the fetching query of the destination that include the JWT of the current request and the strategy for selecting a destination.
 * @returns A promise returning the requested destination on success.
 */
function getDestinationOptions(name, options) {
    if (options === void 0) { options = {}; }
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, getDestination(name, options)];
        });
    });
}
exports.getDestinationOptions = getDestinationOptions;
/**
 * Builds a destination from one of three sources (in the given order):
 * - from the environment variable "destinations"
 * - from service bindings
 * - from the destination service
 *
 * If you want to get a destination only from a specific source, use the corresponding function directly
 *  (`getDestinationFromEnvByName`, `destinationForServiceBinding`, `getDestinationFromDestinationService`).
 *
 * @param name - The name of the destination to be retrieved.
 * @param options - Configuration for how to retrieve destinations from the destination service.
 * @returns A promise returning the requested destination on success.
 */
function getDestination(name, options) {
    if (options === void 0) { options = {}; }
    return __awaiter(this, void 0, void 0, function () {
        var destination;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, (tryDestinationFromEnv(name) ||
                        tryDestinationForServiceBinding(name) ||
                        getDestinationFromDestinationService(name, options))];
                case 1:
                    destination = _a.sent();
                    return [2 /*return*/, destination];
            }
        });
    });
}
exports.getDestination = getDestination;
/**
 * Retrieves a destination with the given name from the Cloud Foundry destination service.
 * Returns null if no destination can be found.
 * Requires the following service bindings: destination, XSUAA
 * By default, selects subscriber over provider and instance over subaccount destinations.
 *
 * If the destinations are read from the environment, the jwt will be ignored.
 *
 * @param name - The name of the destination to be retrieved.
 * @param options - Configuration for how to retrieve destinations from the destination service.
 * @returns A promise returning the requested destination on success.
 */
function getDestinationFromDestinationService(name, options) {
    return __awaiter(this, void 0, void 0, function () {
        var decodedUserJwt, _a, isolation, selectionStrategy, providerDestinationCache, subscriberDestinationCache, userJwt, optionsWithoutJwt, providerToken, decodedProviderJwt, shouldExecuteSubscriberCalls, subscriberDestinations, _b, providerDestinations, _c, allDestinations, destination, destinationService;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    logger.info('Attempting to retrieve destination from destination service.');
                    if (!options.userJwt) return [3 /*break*/, 2];
                    return [4 /*yield*/, jwt_1.verifyJwt(options.userJwt, options)];
                case 1:
                    _a = _d.sent();
                    return [3 /*break*/, 3];
                case 2:
                    _a = options.iss
                        ? { iss: options.iss }
                        : undefined;
                    _d.label = 3;
                case 3:
                    decodedUserJwt = _a;
                    isolation = options.isolationStrategy
                        ? options.isolationStrategy
                        : cache_1.IsolationStrategy.Tenant;
                    selectionStrategy = options.selectionStrategy
                        ? options.selectionStrategy
                        : destination_selection_strategies_1.subscriberFirst;
                    if (options.useCache &&
                        options.userJwt &&
                        subscriberDestinationIsSelected(selectionStrategy)) {
                        subscriberDestinationCache = destination_cache_1.destinationCache.retrieveDestinationFromCache(decodedUserJwt, name, isolation);
                        if (subscriberDestinationCache) {
                            logger.info('Successfully retrieved destination from destination service cache for subscriber destinations.');
                            return [2 /*return*/, subscriberDestinationCache];
                        }
                    }
                    userJwt = options.userJwt, optionsWithoutJwt = __rest(options, ["userJwt"]);
                    return [4 /*yield*/, token_accessor_1.serviceToken('destination', optionsWithoutJwt)];
                case 4:
                    providerToken = _d.sent();
                    return [4 /*yield*/, jwt_1.decodeJwt(providerToken)];
                case 5:
                    decodedProviderJwt = _d.sent();
                    if (options.useCache) {
                        providerDestinationCache = destination_cache_1.destinationCache.retrieveDestinationFromCache(decodedProviderJwt, name, isolation);
                        if (providerDestinationCache &&
                            (selectionStrategy === destination_selection_strategies_1.alwaysProvider ||
                                (decodedUserJwt &&
                                    jwt_1.isIdenticalTenant(decodedUserJwt, decodedProviderJwt)))) {
                            logger.info('Successfully retrieved destination from destination service cache for provider destinations.');
                            return [2 /*return*/, providerDestinationCache];
                        }
                    }
                    shouldExecuteSubscriberCalls = decodedUserJwt &&
                        !jwt_1.isIdenticalTenant(decodedUserJwt, decodedProviderJwt) &&
                        selectionStrategy !== destination_selection_strategies_1.alwaysProvider;
                    if (!shouldExecuteSubscriberCalls) return [3 /*break*/, 7];
                    return [4 /*yield*/, getAllSubscriberDestinations(decodedUserJwt, options)];
                case 6:
                    _b = _d.sent();
                    return [3 /*break*/, 8];
                case 7:
                    _b = emptyDestinationByType;
                    _d.label = 8;
                case 8:
                    subscriberDestinations = _b;
                    if (emptyDestinationsByType(subscriberDestinations) &&
                        providerDestinationCache &&
                        selectionStrategy !== destination_selection_strategies_1.alwaysSubscriber) {
                        logger.info('Successfully retrieved destination from destination service cache for provider destinations.');
                        return [2 /*return*/, providerDestinationCache];
                    }
                    if (!(selectionStrategy !== destination_selection_strategies_1.alwaysSubscriber)) return [3 /*break*/, 10];
                    return [4 /*yield*/, getAllProviderDestinations(providerToken, options)];
                case 9:
                    _c = _d.sent();
                    return [3 /*break*/, 11];
                case 10:
                    _c = emptyDestinationByType;
                    _d.label = 11;
                case 11:
                    providerDestinations = _c;
                    if (options.useCache) {
                        if (options.userJwt) {
                            destination_cache_1.destinationCache.cacheRetrievedDestinations(decodedUserJwt, subscriberDestinations, isolation);
                        }
                        destination_cache_1.destinationCache.cacheRetrievedDestinations(decodedProviderJwt, providerDestinations, isolation);
                    }
                    allDestinations = {
                        subscriber: subscriberDestinations,
                        provider: providerDestinations
                    };
                    destination = selectionStrategy(allDestinations, name);
                    if (!destination) return [3 /*break*/, 23];
                    if (!(destination.authentication === 'OAuth2SAMLBearerAssertion')) return [3 /*break*/, 16];
                    if (!destination.systemUser) return [3 /*break*/, 13];
                    destinationService = environment_accessor_1.getService('destination');
                    if (!destinationService) {
                        throw Error("Failed to fetch destination \"" + name + "\"! No binding to a destination service found.");
                    }
                    logger.debug(providerToken);
                    return [4 /*yield*/, destination_service_1.fetchDestination(destinationService.credentials.uri, providerToken, name, options)];
                case 12:
                    destination = _d.sent();
                    return [3 /*break*/, 15];
                case 13:
                    if (!options.userJwt) {
                        throw Error("No user token (JWT) has been provided! This is strictly necessary for principal propagation. Value of the JWT: " + options.userJwt + ".");
                    }
                    return [4 /*yield*/, getDestinationWithAuthTokens(name, options.userJwt, options)];
                case 14:
                    destination = _d.sent();
                    _d.label = 15;
                case 15: return [3 /*break*/, 18];
                case 16:
                    if (!(destination.authentication === 'ClientCertificateAuthentication')) return [3 /*break*/, 18];
                    return [4 /*yield*/, getDestinationWithCertificates(name, decodedUserJwt, options)];
                case 17:
                    destination = _d.sent();
                    _d.label = 18;
                case 18:
                    if (!destination) return [3 /*break*/, 21];
                    logger.info('Successfully retrieved destination from destination service.');
                    if (!(proxy_util_1.proxyStrategy(destination) === proxy_util_1.ProxyStrategy.ON_PREMISE_PROXY)) return [3 /*break*/, 20];
                    return [4 /*yield*/, connectivity_service_1.addProxyConfigurationOnPrem(destination, options.userJwt)];
                case 19:
                    destination = _d.sent();
                    _d.label = 20;
                case 20:
                    if (proxy_util_1.proxyStrategy(destination) === proxy_util_1.ProxyStrategy.INTERNET_PROXY) {
                        destination = proxy_util_1.addProxyConfigurationInternet(destination);
                    }
                    return [3 /*break*/, 22];
                case 21:
                    logger.info('Could not retrieve destination from destination service.');
                    _d.label = 22;
                case 22:
                    destination_cache_1.destinationCache.cacheRetrievedDestinations(decodedUserJwt || decodedProviderJwt, { instance: [], subaccount: [destination] }, options.isolationStrategy || cache_1.IsolationStrategy.Tenant);
                    _d.label = 23;
                case 23: return [2 /*return*/, destination];
            }
        });
    });
}
exports.getDestinationFromDestinationService = getDestinationFromDestinationService;
function tryDestinationForServiceBinding(name) {
    logger.info('Attempting to retrieve destination from service binding.');
    try {
        var destination = vcap_service_destination_1.destinationForServiceBinding(name);
        logger.info('Successfully retrieved destination from service binding.');
        return destination;
    }
    catch (error) {
        logger.info(error.message);
        logger.info('Could not retrieve destination from service binding.');
        logger.info('If you are not using SAP Extension Factory, this information probably does not concern you.');
        return undefined;
    }
}
function tryDestinationFromEnv(name) {
    logger.info('Attempting to retrieve destination from environment variable.');
    if (env_destination_accessor_1.getDestinationsEnvVariable()) {
        logger.warn("Environment variable 'destinations' is set. Destinations will be read from this variable. " +
            'This is discouraged for a productive application! ' +
            'Unset the variable to read destinations from the destination service on SAP Cloud Platform.');
        try {
            var destination = env_destination_accessor_1.getDestinationFromEnvByName(name);
            if (destination) {
                logger.info('Successfully retrieved destination from environment variable.');
                return destination;
            }
        }
        catch (error) {
            logger.info(error.message);
        }
    }
    logger.info('Could not retrieve destination from environment variable.');
}
/**
 * This function will fetch a destination of a subscriber given a destination name and the subscriber JWT.
 *
 * @param userJwt - The (encoded) JWT of the current request.
 * @param options - Destination retrieval options.
 * @returns A promise, that (if it resolves) contains the subscriber destinations, grouped by type (instance, subaccount).
 */
function getAllSubscriberDestinations(userJwt, options) {
    return __awaiter(this, void 0, void 0, function () {
        var destinationServiceCreds, accessToken;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    destinationServiceCreds = getDestinationServiceCredentials();
                    return [4 /*yield*/, token_accessor_1.serviceToken('destination', __assign({ userJwt: userJwt }, options))];
                case 1:
                    accessToken = _a.sent();
                    return [2 /*return*/, getInstanceAndSubaccountDestinations(destinationServiceCreds.uri, accessToken, options)];
            }
        });
    });
}
function getAllProviderDestinations(providerJwt, options) {
    return __awaiter(this, void 0, void 0, function () {
        var destinationServiceCreds;
        return __generator(this, function (_a) {
            destinationServiceCreds = getDestinationServiceCredentials();
            return [2 /*return*/, getInstanceAndSubaccountDestinations(destinationServiceCreds.uri, providerJwt, options)];
        });
    });
}
function getInstanceAndSubaccountDestinations(destinationServiceUri, accessToken, options) {
    return __awaiter(this, void 0, void 0, function () {
        var destinations;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, Promise.all([
                        destination_service_1.fetchInstanceDestinations(destinationServiceUri, accessToken, options),
                        destination_service_1.fetchSubaccountDestinations(destinationServiceUri, accessToken, options)
                    ])];
                case 1:
                    destinations = _a.sent();
                    return [2 /*return*/, {
                            instance: destinations[0],
                            subaccount: destinations[1]
                        }];
            }
        });
    });
}
function getDestinationWithCertificates(name, userJwt, options) {
    return __awaiter(this, void 0, void 0, function () {
        var destinationServiceCreds, accessToken;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    destinationServiceCreds = getDestinationServiceCredentials();
                    return [4 /*yield*/, token_accessor_1.serviceToken('destination', __assign({ userJwt: userJwt }, options))];
                case 1:
                    accessToken = _a.sent();
                    return [2 /*return*/, destination_service_1.fetchDestination(destinationServiceCreds.uri, accessToken, name, options)];
            }
        });
    });
}
function getDestinationWithAuthTokens(name, userJwt, options) {
    return __awaiter(this, void 0, void 0, function () {
        var destinationService, accessToken;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    destinationService = environment_accessor_1.getService('destination');
                    if (!destinationService) {
                        throw Error("Failed to fetch destination \"" + name + "\"! No binding to a destination service found.");
                    }
                    return [4 /*yield*/, token_accessor_1.userApprovedServiceToken(userJwt, destinationService, options)];
                case 1:
                    accessToken = _a.sent();
                    return [2 /*return*/, destination_service_1.fetchDestination(destinationService.credentials.uri, accessToken, name, options)];
            }
        });
    });
}
function getDestinationServiceCredentials() {
    var credentials = environment_accessor_1.getDestinationServiceCredentialsList();
    if (!credentials || credentials.length === 0) {
        throw Error('No binding to a Destination service instance found. Please bind a destination service instance to your application!');
    }
    return credentials[0];
}
var emptyDestinationByType = {
    instance: [],
    subaccount: []
};
function subscriberDestinationIsSelected(selectionStrategy) {
    return (selectionStrategy === destination_selection_strategies_1.subscriberFirst ||
        selectionStrategy === destination_selection_strategies_1.alwaysSubscriber);
}
function emptyDestinationsByType(destinationByType) {
    return (!destinationByType.instance.length && !destinationByType.instance.length);
}
//# sourceMappingURL=destination-accessor.js.map