"use strict";
/* Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved. */
Object.defineProperty(exports, "__esModule", { value: true });
exports.isDestinationJson = exports.isDestinationConfiguration = exports.toDestinationNameUrl = exports.parseDestination = exports.sanitizeDestination = void 0;
var rambda_1 = require("rambda");
var destination_service_types_1 = require("./destination-service-types");
/**
 * Takes an existing or a parsed destination and returns an SDK compatible destination object.
 *
 * @param destination - An object that adheres to the [[Destination]] interface.
 * @returns An SDK compatible destination object.
 */
function sanitizeDestination(destination) {
    validateDestinationInput(destination);
    var parsedDestination = rambda_1.pipe(parseAuthTokens, parseCertificates)(destination);
    return rambda_1.pipe(setDefaultAuthenticationFallback, setTrustAll, setOriginalProperties)(parsedDestination);
}
exports.sanitizeDestination = sanitizeDestination;
/**
 * Takes a JSON object returned by any of the calls to the destination service and returns an SDK compatible destination object.
 * This function only accepts destination configurations of type 'HTTP' and will error if no 'URL' is given.
 *
 * @param destinationJson - A JSON object returned by the destination service.
 * @returns An SDK compatible destination object.
 */
function parseDestination(destinationJson) {
    var destinationConfig = getDestinationConfig(destinationJson);
    validateDestinationConfig(destinationConfig);
    var destination = Object.entries(destinationConfig).reduce(function (dest, _a) {
        var originalKey = _a[0], value = _a[1];
        if (originalKey in configMapping) {
            dest[configMapping[originalKey]] = value;
        }
        return dest;
    }, {
        originalProperties: destinationJson,
        authTokens: destinationJson['authTokens'] || [],
        certificates: destinationJson['certificates'] || []
    });
    return sanitizeDestination(destination);
}
exports.parseDestination = parseDestination;
function getDestinationConfig(destinationJson) {
    return isDestinationJson(destinationJson)
        ? destinationJson.destinationConfiguration
        : destinationJson;
}
function validateDestinationConfig(destinationConfig) {
    if (isHttpDestination(destinationConfig) &&
        typeof destinationConfig.URL === 'undefined') {
        throw Error("Property 'URL' of destination configuration must not be undefined.");
    }
}
function validateDestinationInput(destinationInput) {
    if (isHttpDestination(destinationInput) &&
        typeof destinationInput.url === 'undefined') {
        throw Error("Property 'url' of destination input must not be undefined.");
    }
}
function isHttpDestination(destinationInput) {
    return (destinationInput.Type === 'HTTP' ||
        destinationInput.type === 'HTTP' ||
        (typeof destinationInput.type === 'undefined' &&
            typeof destinationInput.Type === 'undefined'));
}
/* eslint-disable-next-line valid-jsdoc */
/**
 * @hidden
 */
function toDestinationNameUrl(destination) {
    return destination_service_types_1.isDestinationNameAndJwt(destination)
        ? "name: " + destination.destinationName
        : "name: " + destination.name + ", url: " + destination.url;
}
exports.toDestinationNameUrl = toDestinationNameUrl;
function setOriginalProperties(destination) {
    var originalProperties = destination.originalProperties
        ? destination.originalProperties
        : destination;
    return rambda_1.assoc('originalProperties', originalProperties, destination);
}
function setDefaultAuthenticationFallback(destination) {
    return destination.authentication
        ? destination
        : rambda_1.assoc('authentication', getAuthenticationType(destination), destination);
}
function parseCertificate(certificate) {
    return {
        name: certificate.Name || certificate.name,
        content: certificate.Content || certificate.content,
        type: certificate.Type || certificate.type
    };
}
function parseCertificates(destination) {
    var certificates = destination.certificates
        ? destination.certificates.map(parseCertificate)
        : [];
    return rambda_1.assoc('certificates', certificates, destination);
}
function parseAuthToken(authToken) {
    return {
        type: authToken.type,
        value: authToken.value,
        expiresIn: authToken.expires_in,
        error: 'error' in authToken ? authToken.error : null
    };
}
function parseAuthTokens(destination) {
    var authTokens = destination.authTokens
        ? destination.authTokens.map(parseAuthToken)
        : [];
    return rambda_1.assoc('authTokens', authTokens, destination);
}
function setTrustAll(destination) {
    return rambda_1.assoc('isTrustingAllCertificates', parseTrustAll(destination.isTrustingAllCertificates), destination);
}
function parseTrustAll(isTrustingAllCertificates) {
    if (typeof isTrustingAllCertificates === 'string') {
        return isTrustingAllCertificates.toLowerCase() === 'true';
    }
    return !!isTrustingAllCertificates;
}
function getAuthenticationType(destination) {
    return destination.authentication ||
        (destination.username && destination.password)
        ? 'BasicAuthentication'
        : 'NoAuthentication';
}
/* eslint-disable-next-line valid-jsdoc */
/**
 * @hidden
 */
function isDestinationConfiguration(destination) {
    return destination.URL !== undefined;
}
exports.isDestinationConfiguration = isDestinationConfiguration;
/* eslint-disable-next-line valid-jsdoc */
/**
 * @hidden
 */
function isDestinationJson(destination) {
    return Object.keys(destination).includes('destinationConfiguration');
}
exports.isDestinationJson = isDestinationJson;
var configMapping = {
    URL: 'url',
    Name: 'name',
    User: 'username',
    Password: 'password',
    ProxyType: 'proxyType',
    'sap-client': 'sapClient',
    Authentication: 'authentication',
    TrustAll: 'isTrustingAllCertificates',
    Type: 'type',
    tokenServiceURL: 'tokenServiceUrl',
    clientId: 'clientId',
    clientSecret: 'clientSecret',
    tokenServiceUser: 'tokenServiceUser',
    tokenServicePassword: 'tokenServicePassword',
    CloudConnectorLocationId: 'cloudConnectorLocationId',
    certificates: 'certificates',
    KeyStoreLocation: 'keyStoreName',
    KeyStorePassword: 'keyStorePassword',
    SystemUser: 'systemUser'
};
//# sourceMappingURL=destination.js.map