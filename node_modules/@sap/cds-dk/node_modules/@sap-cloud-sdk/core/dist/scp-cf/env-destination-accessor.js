"use strict";
/* Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved. */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDestinationsEnvVariable = exports.getDestinationConfig = exports.getDestinationByName = exports.getDestinationFromEnvByName = exports.getDestinations = exports.getDestinationsFromEnv = void 0;
var util_1 = require("@sap-cloud-sdk/util");
var proxy_util_1 = require("../util/proxy-util");
var destination_1 = require("./destination");
var logger = util_1.createLogger({
    package: 'core',
    messageContext: 'env-destination-accessor'
});
/**
 * Get all destinations from the environment variable "destinations".
 * This is discouraged for productive use! Use [[useOrFetchDestination]] for fetching destinations from the Cloud Foundry destination service.
 *
 * @returns A list of destinations
 */
function getDestinationsFromEnv() {
    var destinationsEnv = getDestinationsEnvVariable();
    if (destinationsEnv) {
        var destinations = JSON.parse(destinationsEnv);
        validateDestinations(destinations);
        return destinations.map(function (destination) {
            return destination_1.isDestinationConfiguration(destination)
                ? destination_1.parseDestination(destination)
                : destination_1.sanitizeDestination(destination);
        });
    }
    return [];
}
exports.getDestinationsFromEnv = getDestinationsFromEnv;
/**
 * @deprecated Since v1.4.2. Use [[getDestinationsFromEnv]] instead.
 *
 * Get all destinations from the environment variable "destinations".
 * This is discouraged for productive use! Use destination-accessor/useOrFetchDestination for fetching destinations
 * from the Cloud Foundry destination service.
 *
 * @returns A list of destinations
 */
function getDestinations() {
    return getDestinationsFromEnv();
}
exports.getDestinations = getDestinations;
/**
 * Get a destination from the environment variables by name. Throws an error if there are multiple destinations with the same name.
 * This is discouraged for productive use! Use destination-accessor/useOrFetchDestination for fetching destinations
 * from the Cloud Foundry destination service.
 *
 * @param name - Name of the destination
 * @returns The requested destination if existent, otherwise `null`
 */
function getDestinationFromEnvByName(name) {
    var matchingDestinations = getDestinationsFromEnv().filter(function (dest) { return dest.name === name; });
    if (!matchingDestinations.length) {
        return null;
    }
    if (matchingDestinations.length > 1) {
        logger.warn("The 'destinations' env variable contains multiple destinations with the name '" + name + "'. Only the first entry will be respected.");
    }
    var destination = matchingDestinations[0];
    return proxy_util_1.proxyStrategy(destination) === proxy_util_1.ProxyStrategy.INTERNET_PROXY
        ? proxy_util_1.addProxyConfigurationInternet(destination)
        : destination;
}
exports.getDestinationFromEnvByName = getDestinationFromEnvByName;
/**
 * @deprecated Since v1.4.2. Use [[getDestinationFromEnvByName]] instead.
 *
 * Get a destination from the environment variables by name. Throws an error if there are multiple destinations with the same name.
 * This is discouraged for productive use! Use destination-accessor/useOrFetchDestination for fetching destinations
 * from the Cloud Foundry destination service.
 *
 * @param name - Name of the destination
 * @returns The requested destination if existent, otherwise `null`
 */
function getDestinationByName(name) {
    return getDestinationFromEnvByName(name);
}
exports.getDestinationByName = getDestinationByName;
/* eslint-disable valid-jsdoc */
/**
 * @hidden
 */
function getDestinationConfig(dest) {
    if (dest === void 0) { dest = 'ErpQueryEndpoint'; }
    return typeof dest === 'string' ? getDestinationFromEnvByName(dest) : dest;
}
exports.getDestinationConfig = getDestinationConfig;
/**
 * @hidden
 */
function getDestinationsEnvVariable() {
    return process.env['destinations'];
}
exports.getDestinationsEnvVariable = getDestinationsEnvVariable;
function validateDestinations(destinations) {
    destinations.forEach(function (destination) {
        if (typeof destination.name === 'undefined' &&
            typeof destination.Name === 'undefined') {
            logger.warn("Destination from 'destinations' env variable is missing 'name' or 'Name' property.");
        }
    });
}
//# sourceMappingURL=env-destination-accessor.js.map