"use strict";
/* Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved. */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.userApprovedServiceToken = exports.serviceToken = void 0;
var util_1 = require("@sap-cloud-sdk/util");
var util_2 = require("../util");
var client_credentials_token_cache_1 = require("./client-credentials-token-cache");
var environment_accessor_1 = require("./environment-accessor");
var subdomain_replacer_1 = require("./subdomain-replacer");
var xsuaa_service_1 = require("./xsuaa-service");
/**
 * Returns an access token that can be used to call the given service. The token is fetched via a client credentials grant with the credentials of the given service.
 * If multiple instances of the provided service exist, the first instance will be selected.
 * When a JWT is passed, the tenant of the JWT will be used when performing the grant.
 * When no JWT is passed, the grant will be performed using the provider tenant.
 *
 * Throws an error if there is no instance of the given service type or the XSUAA service, or if the request to the XSUAA service fails.
 *
 * @param service - The type of the service or an instance of [[Service]].
 * @param options - Options to influence caching and resilience behavior (see [[CachingOptions]] and [[ResilienceOptions]], respectively) and a JWT. By default, caching and usage of a circuit breaker are enabled.
 * @returns Access token.
 */
function serviceToken(service, options) {
    return __awaiter(this, void 0, void 0, function () {
        var resolvedService, opts, xsuaa, serviceCreds, cachedToken;
        return __generator(this, function (_a) {
            resolvedService = environment_accessor_1.resolveService(service);
            opts = __assign({ useCache: true, enableCircuitBreaker: true }, (options || {}) // Tsc complains otherwise
            );
            xsuaa = multiTenantXsuaaCredentials(opts.userJwt);
            serviceCreds = environment_accessor_1.extractClientCredentials(resolvedService.credentials);
            if (opts.useCache) {
                cachedToken = client_credentials_token_cache_1.clientCredentialsTokenCache.getGrantTokenFromCache(xsuaa.url, serviceCreds);
                if (cachedToken) {
                    return [2 /*return*/, Promise.resolve(cachedToken.access_token)];
                }
            }
            return [2 /*return*/, xsuaa_service_1.clientCredentialsGrant(xsuaa, serviceCreds, opts)
                    .then(function (resp) {
                    if (opts.useCache) {
                        client_credentials_token_cache_1.clientCredentialsTokenCache.cacheRetrievedToken(xsuaa.url, serviceCreds, resp);
                    }
                    return resp.access_token;
                })
                    .catch(function (error) {
                    throw util_1.errorWithCause("Fetching an access token for service \"" + resolvedService.label + "\" failed!", error);
                })];
        });
    });
}
exports.serviceToken = serviceToken;
/**
 * Returns a user approved access token that can be used to call the given service on behalf of the given user. The token is fetched via user token + refresh token grant.
 * This can be necessary for scenarios in which a token for a service is required, but the service needs
 * to know about the user on whose behalf the request is performed (for example to let the destination
 * service perform principal propagation with SAP S/4HANA Cloud).
 *
 * Throws an error if there is no instance of the given service type or the XSUAA service, or if the request to the XSUAA service fails.
 *
 * @param userJwt - The JWT of the user for whom the access token should be fetched.
 * @param service - The type of the service or an instance of [[Service]].
 * @param options - Options to influence resilience behavior (see [[ResilienceOptions]]). By default, usage of a circuit breaker is enabled.
 * @returns A user approved access token.
 */
function userApprovedServiceToken(userJwt, service, options) {
    return __awaiter(this, void 0, void 0, function () {
        var resolvedService, opts, xsuaa, serviceCreds;
        return __generator(this, function (_a) {
            resolvedService = environment_accessor_1.resolveService(service);
            opts = __assign({ enableCircuitBreaker: true }, options);
            xsuaa = multiTenantXsuaaCredentials(userJwt);
            serviceCreds = environment_accessor_1.extractClientCredentials(resolvedService.credentials);
            return [2 /*return*/, xsuaa_service_1.userTokenGrant(xsuaa.url, userJwt, serviceCreds.username, opts)
                    .then(function (userToken) {
                    return xsuaa_service_1.refreshTokenGrant(xsuaa, serviceCreds, userToken.refresh_token, opts);
                })
                    .then(function (refreshToken) { return refreshToken.access_token; })
                    .catch(function (error) {
                    throw util_1.errorWithCause("Fetching a user approved access token for service \"" + resolvedService.label + "\" failed!", error);
                })];
        });
    });
}
exports.userApprovedServiceToken = userApprovedServiceToken;
function multiTenantXsuaaCredentials(userJwt) {
    var xsuaa = environment_accessor_1.getXsuaaServiceCredentials(userJwt);
    if (userJwt) {
        var decodedJwt = typeof userJwt === 'string' ? util_2.decodeJwt(userJwt) : userJwt;
        if (!decodedJwt.iss) {
            throw Error('Property "iss" is missing from the provided user token! This shouldn\'t happen.');
        }
        xsuaa.url = subdomain_replacer_1.replaceSubdomain(decodedJwt.iss, xsuaa.url);
    }
    return xsuaa;
}
//# sourceMappingURL=token-accessor.js.map