"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.replaceDuplicateKeys = exports.filterNullishValues = exports.getHeaderValue = exports.getHeader = exports.toSanitizedHeaderObject = void 0;
/* Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved. */
var util_1 = require("@sap-cloud-sdk/util");
/**
 * Create a header object based on the given key and value if neither key nor value are nullish.
 * @param key - Name of the header.
 * @param value - Value of the header.
 * @returns - An object containing the given key and value of an empty object.
 */
function toSanitizedHeaderObject(key, value) {
    var _a;
    return util_1.isNullish(key) || util_1.isNullish(value) ? {} : (_a = {}, _a[key] = value, _a);
}
exports.toSanitizedHeaderObject = toSanitizedHeaderObject;
/**
 * Find a header in a given header object, if available, idepdendent of the case (lower / upper).
 * @param key - Name of the header to be found.
 * @param headers - Header object to be searched for given key.
 * @returns - An object containing the given key (and value) in its original case, as found in `headers` or an empty object if not found.
 */
function getHeader(key, headers) {
    var _a;
    if (headers === void 0) { headers = {}; }
    var entry = Object.entries(headers).find(function (_a) {
        var entryKey = _a[0];
        return entryKey.toLowerCase() === key.toLowerCase();
    });
    return entry ? (_a = {}, _a[entry[0]] = entry[1], _a) : {};
}
exports.getHeader = getHeader;
/**
 * Get the value of a header based on the given key, independent of the case (lower / upper).
 * @param key - Name of the header to be found.
 * @param headers - Header object to be searched for given key.
 * @returns The value of the header with the given key or undefined.
 */
function getHeaderValue(key, headers) {
    if (headers === void 0) { headers = {}; }
    return Object.values(getHeader(key, headers))[0];
}
exports.getHeaderValue = getHeaderValue;
/**
 * Filter headers that have nullish values.
 * @param headers - A header object to be filtered.
 * @returns - A filtered header object containing only headers with non-nullish values.
 */
function filterNullishValues(headers) {
    if (headers === void 0) { headers = {}; }
    return Object.entries(headers)
        .filter(function (_a) {
        var _ = _a[0], value = _a[1];
        return !util_1.isNullish(value);
    })
        .reduce(function (filtered, _a) {
        var _b;
        var key = _a[0], value = _a[1];
        return (__assign(__assign({}, filtered), (_b = {}, _b[key] = value, _b)));
    }, {});
}
exports.filterNullishValues = filterNullishValues;
/**
 * Create a header object by replacing headers that are set as custom headers.
 * @param headers - A base header object that contains the headers that will be compared with `customHeaders`.
 * @param customHeaders - A header object to be compared with headers. Only headers present in `headers` will be compared.
 * @returns - An object containing all keys from the original `headers` object, where headers present in the `customHeaders` are replaced. Note that the case (upper / lower) used by `customHeaders` will be used.
 */
function replaceDuplicateKeys(headers, customHeaders) {
    if (headers === void 0) { headers = {}; }
    if (customHeaders === void 0) { customHeaders = {}; }
    return Object.entries(headers)
        .map(function (_a) {
        var _b;
        var key = _a[0], value = _a[1];
        return getHeaderValue(key, customHeaders)
            ? getHeader(key, customHeaders)
            : (_b = {}, _b[key] = value, _b);
    })
        .reduce(function (replaced, header) { return (__assign(__assign({}, replaced), header)); }, {});
}
exports.replaceDuplicateKeys = replaceDuplicateKeys;
//# sourceMappingURL=headers-util.js.map