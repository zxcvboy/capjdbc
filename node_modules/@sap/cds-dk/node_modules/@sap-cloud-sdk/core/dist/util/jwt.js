"use strict";
/* Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved. */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkMandatoryValue = exports.wrapJwtInHeader = exports.audiences = exports.tenantName = exports.customAttributes = exports.tenantId = exports.userScopes = exports.userEmail = exports.userName = exports.userFamilyName = exports.userGivenName = exports.userId = exports.issuerUrl = exports.isIdenticalTenant = exports.verifyJwtWithKey = exports.verificationKeyCache = exports.verifyJwt = exports.retrieveJwt = exports.decodeJwtComplete = exports.decodeJwt = void 0;
var url = __importStar(require("url"));
var util_1 = require("@sap-cloud-sdk/util");
var jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
var scp_cf_1 = require("../scp-cf");
var tenant_1 = require("../scp-cf/tenant");
var user_1 = require("../scp-cf/user");
var logger = util_1.createLogger({
    package: 'core',
    messageContext: 'jwt'
});
/**
 * Decode JWT.
 * @param token - JWT to be decoded
 * @returns Decoded payload.
 */
function decodeJwt(token) {
    return decodeJwtComplete(token).payload;
}
exports.decodeJwt = decodeJwt;
/**
 * Decode JWT and return the complete decoded token.
 * @param token - JWT to be decoded
 * @returns Decoded token containing payload, header and signature.
 */
function decodeJwtComplete(token) {
    var decodedToken = jsonwebtoken_1.default.decode(token, { complete: true });
    if (decodedToken === null || typeof decodedToken === 'string') {
        throw new Error('JwtError: The given jwt payload does not encode valid JSON.');
    }
    return {
        header: decodedToken.header,
        payload: decodedToken.payload,
        signature: decodedToken.signature
    };
}
exports.decodeJwtComplete = decodeJwtComplete;
/**
 * Retrieve JWT from a request that is based on the node `IncomingMessage`. Fails if no authorization header is given or has the wrong format. Expected format is 'Bearer <TOKEN>'.
 * @param req - Request to retrieve the JWT from
 * @returns JWT found in header
 */
function retrieveJwt(req) {
    var header = authHeader(req);
    if (validateAuthHeader(header)) {
        return header.split(' ')[1];
    }
}
exports.retrieveJwt = retrieveJwt;
function authHeader(req) {
    var entries = Object.entries(req.headers).find(function (_a) {
        var key = _a[0];
        return key.toLowerCase() === 'authorization';
    });
    if (entries) {
        var header = entries[1];
        // Header could be a list of headers
        return Array.isArray(header) ? header[0] : header;
    }
    return undefined;
}
function validateAuthHeader(header) {
    if (typeof header === 'undefined') {
        logger.warn('Authorization header not set.');
        return false;
    }
    var _a = header.split(' '), authType = _a[0], token = _a[1];
    if (typeof token === 'undefined') {
        logger.warn('Token in auth header missing.');
        return false;
    }
    if (authType.toLowerCase() !== 'bearer') {
        logger.warn('Authorization type is not Bearer.');
        return false;
    }
    return true;
}
/**
 * The URL for fetching the verfication certificate should have the same domain as the XSUAA. So if the UUA domain is "authentication.sap.hana.ondemand.com" the URL should be like
 * http://something.authentication.sap.hana.ondemand.com/somePath so the host should end with the domain.
 * @param verificationKeyURL URL used for obtaining the verification key
 * @param uaaDomain domain given in the XSUAA credentials
 */
function checkDomainVerificationKeyURL(verificationKeyURL, uaaDomain) {
    var jkuDomain = url.parse(verificationKeyURL).hostname;
    if (!uaaDomain || !jkuDomain || !jkuDomain.endsWith(uaaDomain)) {
        throw new Error("The domains of the XSUAA and verification URL do not match - XSUUA domain is " + uaaDomain + " and the URL provided in JWT (field jku) to receive validation certificate is " + jkuDomain + ".");
    }
}
/**
 * Verifies the given JWT and returns the decoded payload.
 *
 * @param token - JWT to be verified
 * @param options - Options to control certain aspects of JWT verification behavior.
 * @returns A Promise to the decoded and verified JWT.
 */
function verifyJwt(token, options) {
    return __awaiter(this, void 0, void 0, function () {
        var creds, verificationKeyURL, key;
        return __generator(this, function (_a) {
            options = __assign(__assign({}, defaultVerifyJwtOptions), options);
            creds = scp_cf_1.getXsuaaServiceCredentials(token);
            verificationKeyURL = getVerificationKeyURL(token);
            if (verificationKeyURL) {
                checkDomainVerificationKeyURL(verificationKeyURL, creds.uaadomain);
            }
            if (options.cacheVerificationKeys &&
                exports.verificationKeyCache.get(verificationKeyURL)) {
                key = exports.verificationKeyCache.get(verificationKeyURL);
                return [2 /*return*/, verifyJwtWithKey(token, key.value).catch(function (error) {
                        logger.warn('Unable to verify JWT with cached key, fetching new verification key.');
                        logger.warn("Original error: " + error.message);
                        return fetchAndCacheKeyAndVerify(creds, verificationKeyURL, token, options);
                    })];
            }
            return [2 /*return*/, fetchAndCacheKeyAndVerify(creds, verificationKeyURL, token, options)]; // Verify only here
        });
    });
}
exports.verifyJwt = verifyJwt;
function fetchAndCacheKeyAndVerify(creds, verificationKeyURL, token, options) {
    return getVerificationKey(creds, verificationKeyURL)
        .catch(function (error) {
        return Promise.reject(util_1.errorWithCause('Failed to verify JWT - unable to get verification key!', error));
    })
        .then(function (key) {
        return options ? cacheVerificationKey(verificationKeyURL, key, options) : key;
    })
        .then(function (key) { return verifyJwtWithKey(token, key.value); });
}
var defaultVerifyJwtOptions = {
    cacheVerificationKeys: true
};
function getVerificationKey(xsuaaCredentials, jku) {
    return scp_cf_1.fetchVerificationKeys(xsuaaCredentials, jku).then(function (verificationKeys) {
        if (!verificationKeys.length) {
            throw Error('No verification keys have been returned by the XSUAA service!');
        }
        return verificationKeys[0];
    });
}
// 15 minutes is the default value used by the xssec lib
exports.verificationKeyCache = new scp_cf_1.Cache({ minutes: 15 });
function cacheVerificationKey(verificationKeyURL, key, options) {
    if (options.cacheVerificationKeys) {
        exports.verificationKeyCache.set(verificationKeyURL, key);
    }
    return key;
}
/**
 * Verifies the given JWT with the given key and returns the decoded payload.
 *
 * @param token - JWT to be verified
 * @param key - Key to use for verification
 * @returns A Promise to the decoded and verified JWT.
 */
function verifyJwtWithKey(token, key) {
    return new Promise(function (resolve, reject) {
        jsonwebtoken_1.default.verify(token, sanitizeVerificationKey(key), function (err, decodedToken) {
            if (err) {
                reject(util_1.errorWithCause('JWT invalid', err));
            }
            else {
                resolve(decodedToken);
            }
        });
    });
}
exports.verifyJwtWithKey = verifyJwtWithKey;
function sanitizeVerificationKey(key) {
    // Add new line after -----BEGIN PUBLIC KEY----- and before -----END PUBLIC KEY----- because the lib won't work otherwise
    return key
        .replace(/\n/g, '')
        .replace(/(KEY\s*-+)([^\n-])/, '$1\n$2')
        .replace(/([^\n-])(-+\s*END)/, '$1\n$2');
}
/**
 * Compare two decoded JWTs based on their tenantIds.
 * @param decodedUserToken - User JWT
 * @param decodedProviderToken - Provider JWT
 * @returns Whether the tenant is identical.
 */
function isIdenticalTenant(decodedUserToken, decodedProviderToken) {
    return (readPropertyWithWarn(decodedUserToken, tenant_1.mapping.id.keyInJwt) ===
        readPropertyWithWarn(decodedProviderToken, tenant_1.mapping.id.keyInJwt));
}
exports.isIdenticalTenant = isIdenticalTenant;
/**
 * Get the issuer url of a decoded JWT.
 * @param decodedToken - Token to read the issuer url from.
 * @returns The issuer url if available.
 */
function issuerUrl(decodedToken) {
    return readPropertyWithWarn(decodedToken, 'iss');
}
exports.issuerUrl = issuerUrl;
/**
 * Get the user id of a decoded JWT.
 * @param decodedToken - Token to read the user id from.
 * @returns The user id if available.
 */
function userId(decodedToken) {
    return readPropertyWithWarn(decodedToken, user_1.mapping.id.keyInJwt);
}
exports.userId = userId;
/**
 * Get the user's given name of a decoded JWT.
 * @param decodedToken - Token to read the user id from.
 * @returns The user id if available.
 */
function userGivenName(decodedToken) {
    if (user_1.mapping.givenName) {
        return readPropertyWithWarn(decodedToken, user_1.mapping.givenName.keyInJwt);
    }
}
exports.userGivenName = userGivenName;
/**
 * Get the user's family name of a decoded JWT.
 * @param decodedToken - Token to read the user id from.
 * @returns The user id if available.
 */
function userFamilyName(decodedToken) {
    if (user_1.mapping && user_1.mapping.familyName) {
        return readPropertyWithWarn(decodedToken, user_1.mapping.familyName.keyInJwt);
    }
}
exports.userFamilyName = userFamilyName;
/**
 * Get the user name of a decoded JWT.
 * @param decodedToken - Token to read the user id from.
 * @returns The user id if available.
 */
function userName(decodedToken) {
    return readPropertyWithWarn(decodedToken, user_1.mapping.userName.keyInJwt);
}
exports.userName = userName;
/**
 * Get the user's email of a decoded JWT.
 * @param decodedToken - Token to read the user id from.
 * @returns The user id if available.
 */
function userEmail(decodedToken) {
    if (user_1.mapping && user_1.mapping.email) {
        return readPropertyWithWarn(decodedToken, user_1.mapping.email.keyInJwt);
    }
}
exports.userEmail = userEmail;
/**
 * Get the user's scopes of a decoded JWT.
 * @param decodedToken - Token to read the user id from.
 * @returns The user id if available.
 */
function userScopes(decodedToken) {
    if (!(decodedToken.scope instanceof Array && decodedToken.scope.length)) {
        return [];
    }
    return decodedToken.scope
        .map(function (s) { return (s.includes('.') ? s.substr(s.indexOf('.') + 1, s.length) : s); })
        .map(function (s) { return ({ name: s }); });
}
exports.userScopes = userScopes;
/**
 * Get the tenant id of a decoded JWT.
 * @param decodedToken - Token to read the tenant id from.
 * @returns The tenant id if available.
 */
function tenantId(decodedToken) {
    return readPropertyWithWarn(decodedToken, tenant_1.mapping.id.keyInJwt);
}
exports.tenantId = tenantId;
/**
 * Extracts the custom attributes in the JWT
 * @param decodedToken - Token to read the custom attributes
 * @returns custom attributes added by the xsuaa to the issued JWT.
 */
function customAttributes(decodedToken) {
    if (decodedToken[user_1.mapping.customAttributes.keyInJwt]) {
        return readPropertyWithWarn(decodedToken, user_1.mapping.customAttributes.keyInJwt);
    }
    return new Map();
}
exports.customAttributes = customAttributes;
/**
 * Get the tenant name of a decoded JWT.
 * @param decodedToken - Token to read the tenant id from.
 * @returns The tenant id if available.
 */
function tenantName(decodedToken) {
    var extAttr = readPropertyWithWarn(decodedToken, 'ext_attr');
    if (extAttr) {
        return readPropertyWithWarn(extAttr, 'zdn');
    }
    return undefined;
}
exports.tenantName = tenantName;
/**
 * Retrieve the audiences of a decoded JWT based on the audiences and scopes in the token.
 * @param decodedToken - Token to retrieve the audiences from.
 * @returns A set of audiences.
 */
// Comments taken from the Java SDK implementation
// Currently, scopes containing dots are allowed.
// Since the UAA builds audiences by taking the substring of scopes up to the last dot,
// Scopes with dots will lead to an incorrect audience which is worked around here.
// If a JWT contains no audience, infer audiences based on the scope names in the JWT.
// This is currently necessary as the UAA does not correctly fill the audience in the user token flow.
function audiences(decodedToken) {
    if (audiencesFromAud(decodedToken).length) {
        return new Set(audiencesFromAud(decodedToken));
    }
    return new Set(audiencesFromScope(decodedToken));
}
exports.audiences = audiences;
function audiencesFromAud(decodedToken) {
    if (!(decodedToken.aud instanceof Array && decodedToken.aud.length)) {
        return [];
    }
    return decodedToken.aud.map(function (aud) {
        return aud.includes('.') ? aud.substr(0, aud.indexOf('.')) : aud;
    });
}
function audiencesFromScope(decodedToken) {
    if (!decodedToken.scope) {
        return [];
    }
    var scopes = decodedToken.scope instanceof Array
        ? decodedToken.scope
        : [decodedToken.scope];
    return scopes.reduce(function (aud, scope) {
        if (scope.includes('.')) {
            return __spreadArrays(aud, [scope.substr(0, scope.indexOf('.'))]);
        }
        return aud;
    }, []);
}
/**
 * Wraps the access token in header's authorization.
 * @param token - Token to attach in request header
 * @returns The request header that holds the access token
 */
function wrapJwtInHeader(token) {
    return { headers: { Authorization: 'Bearer ' + token } };
}
exports.wrapJwtInHeader = wrapJwtInHeader;
function readPropertyWithWarn(decodedJwt, property) {
    if (!decodedJwt[property]) {
        logger.warn("WarningJWT: The provided JWT does not include \"" + property + "\" property.");
    }
    return decodedJwt[property];
}
/**
 * Fetches the URL from the JWT header which exposes the verification key for that JWT.
 * @param token - Undecoded JWT as a string
 * @returns The value of jku property of the JWT header
 */
function getVerificationKeyURL(token) {
    var decodedJwt = decodeJwtComplete(token);
    if (!decodedJwt.header.jku) {
        throw new Error('Field jku containing the URL for JWT verification not part of header.');
    }
    return decodedJwt.header.jku;
}
/**
 * Checks if a given key is in the decoded JWT. If not an error is raised
 * @param key - The key of the representation in typescript
 * @param mapping - The mapping between the typescript keys and the JWT key
 * @param decodedJWT - Decoded token on which the check is done
 * @exception Error is thrown if the key is not present.
 */
function checkMandatoryValue(key, mapping, decodedJWT) {
    var value = mapping[key].extractorFunction(decodedJWT);
    if (!value) {
        throw new Error("Field " + mapping[key].keyInJwt + " not provided in decoded jwt: " + decodedJWT);
    }
}
exports.checkMandatoryValue = checkMandatoryValue;
//# sourceMappingURL=jwt.js.map