const path = require('path');

const cds = require('@sap/cds/lib');

const TemplateBase = require('../templateBase');

const commandUtil = require('../../util/commandUtil');
const mvnArchetypes = require('../../util/mvnArchetypeUtil');

const { PROJECT_TYPE, OPTION_JAVA } = require('../../constants');



module.exports = class SamplesTemplate extends TemplateBase {
    constructor(projectPath, generator) {
        super(projectPath, generator, __dirname);
    }

    getPriority() {
        return -Number.MAX_VALUE;
    }

    async checkEnabled() {
        return true;
    }

    async run() {
        switch (await this.getProjectType()) {
            case PROJECT_TYPE.java:
                return await this._addJavaSamples();

            case PROJECT_TYPE.nodejs:
                return await this._addNodejsSamples();

            case PROJECT_TYPE.unknown:
            default:
            // issue warning?
        }
    }

    async _addJavaSamples() {
        // only execute if not add via cds init --add java, otherwise samples would be added twice
        // do not check in checkEnabled since log output "> adding samples" wouldn't appear
        if (!this.options.add.has(OPTION_JAVA)) {
            // keep sequence since plugin needs samples to generate test classes
            const mvnAddSamplesArgs = mvnArchetypes.getAddSamplesCmdArgs(this.options);
            await commandUtil.spawnCommand('mvn', mvnAddSamplesArgs, {
                cwd: this.projectPath
            },  this.logger);

            const mvnAddTestsArgs = mvnArchetypes.getAddTestsCmdArgs(this.options);
            await commandUtil.spawnCommand('mvn', mvnAddTestsArgs, {
                cwd: this.projectPath
            },  this.logger);
        }
    }

    async _addNodejsSamples() {
        const dbFolder = path.join(this.projectPath, cds.env.folders.db);
        await this.templateUtil.copyFiles('nodejs/db', dbFolder, {}, this.options.force);

        const srvFolder = path.join(this.projectPath, cds.env.folders.srv);
        await this.templateUtil.copyFiles('nodejs/srv', srvFolder, {
            dbFolder: cds.env.folders.db.replace(/[\\/]+$/, '')
        }, this.options.force);
    }

    async finalize() {
    }
}
