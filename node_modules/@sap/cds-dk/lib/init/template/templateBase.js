const path = require('path');
const cds = require('@sap/cds/lib');

const TemplateUtil = require('../util/templateUtil');
const commandUtil = require('../util/commandUtil');
const { nullLogger } = require('../util/logger');

const { PROJECT_TYPE } = require('../constants');


module.exports = class TemplateBase {
    constructor(projectPath, generator, dirName) {
        this.isInternal = false;

        this.projectPath = path.resolve(projectPath);
        this.options = generator.options || {};
        this.fsUtil = generator.fsUtil;
        this.logger = generator.logger;
        this.generator = generator;

        this.cwd = this.options.cwd || process.cwd();
        this.name = this.constructor.name.replace(/template/i, '').toLowerCase();

        this.projectName = path.basename(this.projectPath);
        this.templateUtil = new TemplateUtil(path.join(dirName, 'files'), this.fsUtil);
    }

    /**
     * Checks whether the given template should handle this request
     * @returns true, if template should handle this request
     * @throws Error, if request is invalid
     */
    async checkEnabled() {
        return true;
    }

    /**
     *
     */
    async getEnv(force = false) {
        if (!this.env || force) {
            let projectPath;
            if (await this.fsUtil.pathExists(this.projectPath)) {
                projectPath = this.projectPath;
            } else {
                projectPath = this.cwd;
            }

            const logger = (process.env.DEBUG ? this.logger : nullLogger);

            const modPath = path.join(__dirname, '../../../bin/cds.js');
            let envJsonOutput = await commandUtil.spawnCommand('node', [modPath, 'env', 'json'], {
                cwd: projectPath,
                env: process.env
            }, logger, true);

            // cheap check to see if json is valid
            if (envJsonOutput.indexOf('":') < 0) {
                // eslint-disable-next-line no-control-regex
                envJsonOutput = envJsonOutput.replace(/'/g, '"').replace(/\s(\w+):\s/g, ' "$1": ').replace(/\x1b\[\w+m/g, '');
            }
            this.env = JSON.parse(envJsonOutput);
            // env has additional getters and setters
            Object.setPrototypeOf(this.env, cds.env.__proto__);
        }
        return this.env;
    }

    /**
     * Executes the given template.
     * @throws Error, if handling failed.
     */
    async run() {
    }

    /**
     * Called when generation is finished
     */
    async finalize() {
    }

    /**
     * Get priority for this template as number, where
     * 0 is default, positive number means higher, and negative number
     * lower priority.
     * Use Number.MAX_VALUE or -Number.MAX_VALUE
     * @returns the priority for this template as number
     */
    getPriority() {
        return 0;
    }

    /**
     * Returns the project type
     * @see PROJECT_TYPE
     * @returns PROJECT_TYPE for current project
     */
    async getProjectType() {
        if (await this.fsUtil.pathExists(path.join(this.projectPath, 'pom.xml'))) {
            return PROJECT_TYPE.java;
        }

        if (await this.fsUtil.pathExists(path.join(this.projectPath, 'package.json'))) {
            return PROJECT_TYPE.nodejs;
        }

        return PROJECT_TYPE.unknown;
    }
}
