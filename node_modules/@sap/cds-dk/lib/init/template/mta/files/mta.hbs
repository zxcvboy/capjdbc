## Generated mta.yaml based on template version 0.4.0
## appName = {{cap.appName}}
## language={{cap.pLanguage}}; multiTenant={{cap.isMultiTenant}}
## approuter={{ui.approuter}}
_schema-version: '3.1'
ID: {{cap.appId}}
version: {{cap.appVersion}}
description: "{{cap.appDescription}}"
parameters:
  enable-parallel-deployments: true
  {{#ui.approuter}}tenant-delimiter: "{{ui.tenantDelimiter}}" {{/ui.approuter}} {{~! ui.* context is an experimental feature }}
build-parameters:
  before-all:
   - builder: custom
     commands:
      - npm install --production
      - npx -p @sap/cds-dk cds build --production

{{! This template creates one or two deployable modules:
    Java project, non-multitenant:    Java server module + Node.js hdi deployer module
    Java project, multitenant:        Java server module + Node.js cds-mtx module
    Node.js project, non-multitenant: Node.js server module + Node.js hdi deployer module
    Node.js project, multitenant:     Node.js server module including cds-mtx }}
modules:
 # --------------------- SERVER MODULE ------------------------
 - name: {{cap.appName}}-srv
 # ------------------------------------------------------------
   type: {{cap.pLanguage}}
   path: {{& cap.srvPath}}
{{#cap.isMultiTenant}}
   properties:
     SAP_JWT_TRUST_ACL: [{"clientid":"*","identityzone":"sap-provisioning"}]  # Trust between server and SaaS Manager
{{/cap.isMultiTenant}}
{{#cap.isJava}}
   build-parameters:
     builder: custom
     commands: [ mvn clean package ]
     build-result: "target/*.[wj]ar"
{{/cap.isJava}}
{{#cap.hasRequires}}
   requires:
{{#cap.isJava}}
{{#cap.isMultiTenant}}
    - name: mtx-api      # mtx sidecar binding
      properties:
        CDS_MTX_SDC_URL: ~{mtx-url}
{{/cap.isMultiTenant}}
{{/cap.isJava}}
    # Resources extracted from CAP configuration
{{#cap.requires}}
    - name: {{resource.name}}
{{#cap.isJava}}
  {{#resource.isHana}}
      properties:
        SPRING_PROFILES_ACTIVE: cloud
  {{/resource.isHana}}
{{/cap.isJava}}
{{/cap.requires}}
{{/cap.hasRequires}}
   provides:
    - name: srv-api      # required by consumers of CAP services (e.g. approuter)
      properties:
        srv-url: ${default-url}
{{#cap.isNodejs}}
{{#cap.isMultiTenant}}
    - name: mtx-api      # potentially required by approuter
      properties:
        mtx-url: ${default-url}
{{/cap.isMultiTenant}}
{{/cap.isNodejs}}

{{#cap.needsSidecar}}
 # -------------------- SIDECAR MODULE ------------------------
 - name: {{cap.appName}}-{{cap.db.0.name}}-deployer
 # ------------------------------------------------------------
{{#cap.isMultiTenant}} {{! --> we need cap.db.i.multiTenant}}
   type: nodejs
{{/cap.isMultiTenant}}
{{^cap.isMultiTenant}}
   type: hdb
{{/cap.isMultiTenant}}
   path: {{& cap.db.0.path}}  {{! Only consider one module for now }}
   parameters:
     buildpack: nodejs_buildpack
{{#cap.hasRequires}}
   requires:
    # 'hana' and 'xsuaa' resources extracted from CAP configuration
{{#cap.requires}}
{{#resource.isHana}}
    - name: {{resource.name}}
{{/resource.isHana}}
{{#resource.isXsuaa}}
    - name: {{resource.name}}
{{/resource.isXsuaa}}
{{/cap.requires}}
{{/cap.hasRequires}}
{{#cap.isJava}}
{{#cap.isMultiTenant}}
   provides:
    - name: mtx-api      # required by java server and potentially approuter
      properties:
        mtx-url: ${default-url}
{{/cap.isMultiTenant}}
{{/cap.isJava}}
{{/cap.needsSidecar}}

{{#ui.approuter}}
 # ---------------------- APPROUTER ---------------------------
 - name: {{cap.appName}}
 # ------------------------------------------------------------
   type: approuter.nodejs
   path: {{& ui.appPath}}     # from cds.env.folders. Consider also cds.env.build.target --> gen/app
   parameters:
     disk-quota: 256M        # default in Web IDE
     memory: 256M            # default in Web IDE
     hosts:                  # additional tenant specific hostnames (only for Canary)
      ## the developer will do this via an extension descriptor:
      # - <paas-subdomain >${tenant-delimiter}${host}
      # - <saas-subdomain1>${tenant-delimiter}${host}
      # - ...
   properties:
     TENANT_HOST_PATTERN: ^(.*)${tenant-delimiter}${default-uri}  # only relevant for multiTenant
   requires:
    - name: uaa              # binding to uaa
    - name: srv-api      # binding to srv module
      group: destinations
      properties:
        name: srv-api        # this is a name which must be used in xs-app.json as well !!!
        url: ~{srv-url}
        forwardAuthToken: true
    - name: mtx-api      # in here always, but really used only if mtx client is used (our recommendation is that they contact cds-mtx via the approuter)
      group: destinations
      properties:
        name: mtx-api        # this is a name which must be used in xs-app.json as well !!!
        url: ~{mtx-url}
{{/ui.approuter}}

{{#cap.hasRequires}}
resources:
 # services extracted from CAP configuration
 # 'service-plan' can be configured via 'cds.requires.<name>.vcap.plan'
{{#cap.requires}}
# ------------------------------------------------------------
 - name: {{resource.name}}
# ------------------------------------------------------------
{{#resource.isPlainHana}}
   type: com.sap.xs.hdi-container
   parameters:
     service: {{resource.service}}  # or 'hanatrial' on trial landscapes
     service-plan: hdi-shared
{{#resource.vcap.name}}
     service-name: {{resource.vcap.name}}
{{/resource.vcap.name}}
   properties:
     hdi-service-name: ${service-name}
{{/resource.isPlainHana}}
{{#resource.isManagedHana}} {{! enable automatic switching to 'hanatrial' on trial accounts}}
   type: org.cloudfoundry.managed-service
   parameters:
     service: {{resource.service}}
     service-plan: hdi-shared
{{#resource.vcap.name}}
     service-name: {{resource.vcap.name}}
{{/resource.vcap.name}}
   properties:
     hdi-service-name: ${service-name}
{{/resource.isManagedHana}}
{{^resource.isHana}}
   type: org.cloudfoundry.managed-service
   parameters:
{{#resource.isXsuaa}}
     service: xsuaa
     service-plan: application  {{! This logic might be added to transformation coding. There are cases with two xsuaa}}
{{#resource.vcap.name}}
     service-name: {{resource.vcap.name}}
{{/resource.vcap.name}}
     config:
       xsappname: {{../cap.appName}}{{#../cap.isMultiTenant}}-mt{{/../cap.isMultiTenant}}-${space}    #  name + space dependency
       tenant-mode: {{#../cap.isMultiTenant}}shared{{/../cap.isMultiTenant}}{{^../cap.isMultiTenant}}dedicated{{/../cap.isMultiTenant}}
       ##  path to xs-security.json to add roles and scopes
       # path: ./xs-security.json
       ## or inline definition
       # scopes:
       # - name: $XSAPPNAME...
{{/resource.isXsuaa}}
{{^resource.isXsuaa}}
     service: {{resource.service}}
     service-plan: {{resource.vcap.plan}}
{{#resource.vcap.name}}
     service-name: {{resource.vcap.name}}
{{/resource.vcap.name}}
{{/resource.isXsuaa}}
{{/resource.isHana}}

{{/cap.requires}}
{{/cap.hasRequires}}
 {{! consider vcap.tag as well}}