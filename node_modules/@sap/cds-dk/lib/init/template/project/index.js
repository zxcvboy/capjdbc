const os = require('os');
const path = require('path');

const fse = require('@sap/cds-foss')('fs-extra')


const commandUtil = require('../../util/commandUtil');
const mvnArchetypes = require('../../util/mvnArchetypeUtil');

const TemplateBase = require('../templateBase');
const { OPTION_JAVA, OPTION_PROJECT, OPTION_JAVA_MVN, OPTION_JAVA_PACKAGE, URLS } = require('../../constants');


module.exports = class ProjectTemplate extends TemplateBase {
    constructor(projectPath, generator) {
        super(projectPath, generator, __dirname);
        this.isInternal = true;
    }

    getPriority() {
        return Number.MAX_VALUE;
    }

    async checkEnabled() { //NOSONAR
        if (this.options.force) {
            return true;
        }

        const findProjectFile = await this.generator.findProjectFile();
        if (findProjectFile) {
            let message;
            const projectPath = path.relative(this.cwd, this.projectPath);

            if (this.options.add.has(OPTION_JAVA)) {
                // java
                if (projectPath) {
                    message = `You seem to be trying to initialize an existing project. Use a different folder instead.`;
                } else {
                    message = `You seem to be working in a project which is already initialized.`;
                }

            } else {
                // nodejs
                // framework adds 'hidden' feature project so make sure it's not reported to user
                const features = [...this.options.add].filter((v) => {
                    return v !== OPTION_PROJECT;
                }).join(',');

                if (projectPath) {
                    message = `You seem to be trying to initialize an existing project. Use 'cd ${projectPath}' and 'cds add ${features}' instead.`;

                } else {
                    message = `You seem to be working in a project folder. Use 'cds add ${features}' instead.`;
                }
            }

            throw new Error(`${message}
Details: File '${findProjectFile}' exists in the project folder which might indicate an existing project.`);
        }

        if (!this.options.add.has(OPTION_JAVA)) {
            if (this.options[OPTION_JAVA_PACKAGE]) {
                this.logger.warn(`Specified Java package will be ignored since project type is not Java. Use --add java to create project type Java.`);
            }
            if (this.options[OPTION_JAVA_MVN]) {
                this.logger.warn(`Specified Maven parameters will be ignored since project type is not Java. Use --add java to create project type Java.`);
            }
        }

        return true;
    }

    async run() {
        if (this.options.add.has(OPTION_JAVA)) {
            // creates root level project
            await this._createProjectTypeJava();
        } else {
            await this._createCommonFiles();
            await this._createProjectTypeNodejs();
        }
    }

    async finalize() {
        const relativeProjectPath = path.relative(this.cwd, this.projectPath);
        if (relativeProjectPath && relativeProjectPath !== '.') {
            this.logger.log(`Continue with 'cd ${relativeProjectPath}'`);
        }

        if (!this.options.add.has(OPTION_JAVA)) {
            this.logger.log(`Find samples on ${URLS.SAMPLES}`);
        }

        this.logger.log(`Learn about next steps at ${URLS.CAPIRE}`);
    }

    async _createCommonFiles() {
        await this.templateUtil.copyFiles('common', this.projectPath, {
            projectName: this.projectName
        }, this.options.force);

        await this.templateUtil.copyFiles('vscode', this.projectPath, {}, this.options.force);
    }

    async _createProjectTypeNodejs() {
        const env = await this.getEnv();

        const values = {
            projectName: this.projectName
        }
        await this.templateUtil.copyFiles('nodejs', this.projectPath, values, this.options.force);

        const dbFolderPath = path.join(this.projectPath, env.folders.db);
        await this.fsUtil.mkdirp(dbFolderPath);

        const srvFolderPath = path.join(this.projectPath, env.folders.srv);
        await this.fsUtil.mkdirp(srvFolderPath);

        const appFolderPath = path.join(this.projectPath, env.folders.app);
        await this.fsUtil.mkdirp(appFolderPath);

        // used to call npm install here
    }

    async _createProjectTypeJava() {
        const mvnCmdArgs = mvnArchetypes.getGenerateCmdArgs(this.projectName, this.options);

        const tempFolder = await fse.mkdtemp(path.join(os.tmpdir(), `${this.projectName}_`));
        try {
            await commandUtil.spawnCommand('mvn', mvnCmdArgs, {
                cwd: tempFolder
            }, this.logger);

            await this.fsUtil.copy(tempFolder, path.dirname(this.projectPath));
        } finally {
            await fse.remove(tempFolder);
        }
    }
}
