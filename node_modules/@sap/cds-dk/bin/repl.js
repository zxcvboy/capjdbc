module.exports = Object.assign (repl, { options: [], help: `
# SYNOPSIS

    *cds r | repl*

    Launches into a read-eval-print-loop, an interactive playground to
    experiment with cds' JavaScript APIs. See documentation of Node.js'
    REPL for details at _http://nodejs.org/api/repl.html_


`})

function repl (_, options={}) {

  if (module.parent && module.parent.filename.endsWith('/bin/cds.js')) {
    return require('child_process').spawn('node',['--experimental-repl-await', __filename ],{stdio:'inherit'})
  }

  const cds = require('@sap/cds/lib')
  const path = require('path')
  const {inspect} = require('util')

  const colors = options.colors !== false
  const log = options.log || console.log
  const info = colors ? require('../lib/util/term').info : s => s
  log(info('Welcome to cds repl v'+ cds.version))

  const cdsr = require('repl').start ({...options, writer:_writer, ignoreUndefined:true })

  Object.assign (cdsr.context,{ cds,
    Foo:{name:'Foo'},
    Bar:{name:'Bar'}
  })

  inspect.defaultOptions.depth = 11
  function _writer (o) {
    if (!o || typeof o !== 'object') return o
    return inspect(o).replace(/\[Object: null prototype\] /g, '')
  }

  const home = process.env.HOME || process.env.USERPROFILE
  const history = path.join(home,'.cds-repl-history')
  if (cdsr.setupHistory) {  // since Node.js 11
    cdsr.setupHistory (history,()=>{})
  } else {
    const fs = require('fs')
    const historySize = 111
    fs.readFile(history, 'utf-8', (e, txt) => e || (cdsr.history = txt.split('\n')))
    cdsr.on('exit', () => {
      if (cdsr.history)  fs.writeFile(history, cdsr.history.slice(-historySize).join('\n'), () => {})
    })
  }


  process.on('uncaughtException', console.error)
  process.on('unhandledRejection', console.error)

}
/* eslint no-console:0 */
if (!module.parent) repl()
