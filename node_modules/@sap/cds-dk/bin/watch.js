module.exports = Object.assign ( watch, {
    flags: [ '--debug' ],
    help: `
# SYNOPSIS

    *cds watch* [<project>]

    Tells cds to watch for relevant things to come or change in the specified
    project or the current work directory and compile and (re-)run the server
    on every change detected, using the open-source package _nodemon_.

# OPTIONS

    - see _cds help serve_

# SEE ALSO

    Actually, *cds watch* is just a convenient shortcut for:
    *cds serve* --with-mocks --in-memory? --watch [--project <project>] ...
    Check out *cds serve ?* to learn more.

`})

const path = require ('path')
const t = module.exports.codes = {
    reset: '\x1b[0m', // Default
    bold: '\x1b[1m', // Bold/Bright
    link: '\x1b[4m', // underline
    red: '\x1b[91m', // Bright Foreground Red
    green: '\x1b[32m', // Foreground Green
    yellow: '\x1b[33m', // Foreground Green
    orange: '\x1b[38;2;255;140;0m' // darker orange, works with bright and dark background
}


function watch ([folder], {
    ext = 'cds,csn,csv,ts,mjs,cjs,js,json,properties,edmx,xml,env',
    args = ['serve', 'all', '--with-mocks', '--in-memory?']
}={}) {
    if (folder) {
        process.env._original_cwd = process.cwd()
        try { process.chdir (folder) }
        catch(e){
            try { process.chdir (path.dirname (require.resolve(folder+'/package.json', {paths: [process.cwd()]}))) }
            catch(_){ throw e }
        }
        process.on('exit', ()=> process.chdir (process.env._original_cwd))
    }
    const log = (first,...more) => console.log (t.yellow + (first||''), ...more, t.reset)
    log ()
    log (`${t.bold}[cds] - running nodemon...`)
    log (`--ext ${ext}`)
    log (`--exec cds ${args.join(' ')}`)
    let delayed = undefined
    const nodemon = require ('nodemon')
    return nodemon ({
        watch: ['*','.env','.cdsrc.json'], ext, script:__filename, env:{
            NODE_PATH: path.resolve (__dirname, '../node_modules'), // allow global sqlite to be resolved
            _args: JSON.stringify(args),
            _original_cwd: process.env._original_cwd,
        }
    }).on('restart', (files)=>{
        clearTimeout (delayed)
        delayed = setTimeout(()=>{
            log (`${t.bold}        _______________________\n`)
            if (files) for (let each of files) {
                const [,ext] = /\.(\w+)$/.exec(each) || []
                for (let handle of FileHandlers [ext] || [])  handle (each)
            }
        }, 111)}
    ).on('quit', ()=>{
        log (`${t.bold+t.green}\n[cds] - my watch has ended.\n`)
        process.exit()
    })
}


const FileHandlers = {
    edmx: [ file => (FileHandlers._import || (FileHandlers._import = require ('./import'))) (file) ]
}

if (!module.parent) { // launched by nodemon
    process.env._cds_watch = true
    // run through cli in order to use its error handling
    return require('./cds') (...JSON.parse(process.env._args))
}
