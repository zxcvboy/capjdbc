module.exports = Object.assign(build, {
    options: ['--clean', '--project', '--src', '--dest', '--for', '--use', '--opts', '--log-level', '--dry', '--options-model'],
    shortcuts: ['-c', '-in', '-s', '-o', '-4'],
    help: `
# SYNOPSIS

    *cds build* [<options>]

    Builds all modules in the current project by compiling contained CDS sources.
    The modules are folders in the project root directory. All well known modules (db, srv, app)
    or those configured by build tasks defined in _package.json_ or _.cdsrc.json_ are built.

# OPTIONS

     *-4* | *--for* hana | java-cf | node-cf | mtx

        Name of the build task that is applied to the source folder, either explicitly configured in
        the build task list or generated out of the project setup
        For example, the "hana" build task will create SAP HANA artefacts.
        The module folder can be defined using option "--src", a default is used otherwise.

    *--use* <qualified node module name>

        Fully qualified name of the build task that is applied to the source folder.
        For example, "@sap/cds/lib/build/hana" represents the fully qualified name of the "hana" build task.
        The module folder can be defined using option "--src", a default is used otherwise.

    *-s* | *--src* <folder>

        The module folder to build using the build task defined by option "--for" or "--use".
        This option is only supported when building an individual module of the project.
        The folder is resolved based on "<project>/<cds.env.build.target>".
        A default is used based on the type of the build task, for example, the folder "db" is used for a
        "hana" build task, "srv" for "node-cf" or "java-cf" build task.

    *-o* | *--dest* <folder>

        Output folder of the build task. The type of build task is defined by option "--for".
        The folder is resolved based on "<project>/<cds.env.build.target>".
        Default - folder defined by option "--src".
        Note: <cds.env.build.target> can be configured in _.cdsrc.json_ or _package.json_.
        For Node.js projects "gen" is used by default. The output is written to "<project>/gen/*<dest>*/*".
        For Java projects "." is used by default. The output is written to "<project>/*<dest>*/*".

    *--opts* <build task specific options>

        Add a comma-separated list of build task specific options in the format <opt1>=[value1,value2],<opt2>=value.
        For example, --opts model=[db,srv,schema.cds] loads and compiles the CDS model based on the given sources.

    *--log-level* <debug | info | warn | error>

        Choose which level of cds build messages to log, default is *warn*.

    *--production*

        Builds the project using the "production" profile - same when NODE_ENV environment variable is set to "production".
        E.g. HANA deployment artefacts will be created if "sql" has been set as database kind in cds configuration.

    *-in* | *--project* <folder> deprecated

        Use the specified folder as the project root.
        Default - current working directory.

    *-c* | *--clean* deprecated

        Incremental builds are not supported.
        Build output folders are always cleaned before build.


# EXAMPLES

   *cds* build
   *cds* build --production
   *cds* build --log-level info
   *cds* build --for hana
   *cds* build --for java-cf --dest ../srv/target --opts model=[db/model,srv,schema]
`})

/**
 * Redirect to modular build system.
 */
function build(project, options = {}, config = null) {
    if (options.dry) {
        // eslint-disable-next-line no-console
        console.warn("[cds] - CLI option 'dry' is no longer supported.\n")
        delete options.dry
    }
    return require('./all')(project, options, config)
}
