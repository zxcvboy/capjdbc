const _cds = require('@sap/cds/lib')

module.exports = Object.assign(build, {
    options: ['--project', '--for', '--use', '--src', '--dest', '--options-model'],
    flags: ['--clean'],
    shortcuts: ['-in', '4', '', '', '-o'],
    help: `
# SYNOPSIS

    *cds build/all* [<options>]

    **Deprecated - use cds build instead.**

    Builds the modules by compiling contained cds sources.
    The modules are folders in the project root.
    Cleaning the build target is always performed before actual build starts,
    the --clean option has been deprecated.


# OPTIONS

    *-in* | *--project* <folder>

        use the specified folder as the project root.
        default = current working directory ./

    *-4* | *--for* <target>

        alias used to build the source, e.g. hana -> @sap/cds/build/hana.

    *--src*

        source folder used as build input

    *-o*  | *--dest* <folder>

        writes output to the given folder of the project root directory.
        default = ${_cds.env.build.target}

    *--options-model*

        list of root folders or files loaded defining the cds model.


# EXAMPLES

   *cds* build/all
   *cds* build/all -o target
   *cds* build/all --for hana --src db --dest target --options-model db,srv,app
`
})

function build([project], options = {}, /* for unit tests only: */ _env = null) {
    options.project = options.project || project
    // switch-off error logging as CLI is logging any exceptions by default
    // otherwise errors are logged twice
    options.cli = true

    // remove/migrate deprecated CLI options of cds build and cds build/all
    if (options.clean === "false") {
        // eslint-disable-next-line no-console
        console.warn("[cds] - CLI option 'clean' is deprecated - build output folders are always cleaned before build.\n")
    }

    if (typeof options["options-model"] === "string") {
        options.opts = "model=[" + options["options-model"].split(",").map((entry) => entry.trim()) + "]"
        delete options["options-model"]
    }

    try {
        return require('@sap/cds/lib/build').build(options, _env)
    } catch (error) {
        return Promise.reject(error.message)
    }
}
