#!/usr/bin/env node
const cli = { //NOSONAR

  Shortcuts: {
    i: 'init',
    a: 'add',
    m: 'import',
    c: 'compile',
    s: 'serve',
    w: 'watch',
    e: 'env',
    b: 'build',
    d: 'deploy',
    l: 'login',
    o: 'logout',
    v: 'version', '-v':'version', '--version':'version',
    h: 'help', '?':'help', '-?':'help', '--help':'help',
    r: 'repl', '-r':'repl', '-e':'eval',
  },

  exec (cmd = process.argv[2], ...argv) {
    require('util').inspect.defaultOptions = { colors: !!process.stderr.isTTY, depth:11 }
    if (!argv.length) argv = process.argv.slice(3)
    if (!cmd) cmd = process.stdin.isTTY ? 'help' : 'compile'
    if (cmd in this.Shortcuts) cmd = process.argv[2] = this.Shortcuts[cmd]
    if (argv.some(a => this.Shortcuts[a]==='help'))  return this.exec ('help', cmd)
    const task = this.load (cmd, ()=> argv.unshift(cmd) && 'compile')
    const cds_cli = require (_local('@sap/cds/bin/cds'))  // load cds CLI not before task above was loaded
    if (cmd !== 'repl')  cds_cli.errorHandlers()
    return task.apply (this, cds_cli.args(task,argv))
  },

  load (cmd,_default) {
    return /^(\.[/\\])?cds/i.test(cmd) && this.load (_default())
    || _require ('./'+cmd)  // cds-dk commands
    || _require ('@sap/cds/bin/'+cmd, {paths:[process.cwd(), __dirname]}) // prefer local cds for the rest
    || _default && this.load (_default())
    || (()=> { console.error (`Failed to load implementation for '${cmd}'`); process.exitCode = 1 })
  }
}

function _local (id) {
  return require.resolve (id, {paths:[process.cwd(), __dirname]})
}

const DEBUG = /\b(cli)\b/.test (process.env.DEBUG) && console.warn
function _require (id,o) {
  try { var resolved = require.resolve(id,o) } catch(e){ DEBUG && DEBUG (`Command not found: ${id}`); return }
  DEBUG && DEBUG (`[cds] - Command resolved: ${resolved}`)
  const loaded = require (resolved)
  // Resolve singleton cds lib ahead of time with same command lookup options.
  // Goal is to make sure that cds-dk commands get dk's lib in the version they expect,
  // while local commands (run/serve) get the local version.
  const cds = require (require.resolve('@sap/cds',o))
  DEBUG && DEBUG (`[cds] - @sap/cds ${cds.version} loaded: ${cds.home}`)
  return loaded
}

function _minVersion (id, minVersion) {
  const { version } = require (_local (id+'/package.json'))
  return version.split('.')[0] >= minVersion
}

if (_minVersion ('@sap/cds', 4)) {
  module.exports = Object.assign ((..._) => cli.exec(..._), cli)
}
else { // TODO compat to cds 3 remove after a while.
  module.exports = require (_local('@sap/cds/bin/cds'))
//   console.error (`
// [cds] - A new major version of @sap/cds is available. Update with:\n
//                     npm i @sap/cds --save\n`)
}
if (!module.parent)  module.exports()

/* eslint no-console:off */
