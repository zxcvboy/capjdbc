const { bold } = require('../lib/util/term');

module.exports = Object.assign(logout, {
    options: ['--url', '--subdomain'],
    shortcuts: ['-l', '-s'],
    flags: ['--delete-settings', '--clear-invalid'],
    get help() {
        const cdsLogin = `${bold('cds login')}`
        const cdsExtend = bold('cds extend')
        const cdsActivate = bold('cds activate')
        return `
# SYNOPSIS

    *cds logout* [ <project folder> ]

    Removes authentication data saved locally by ${cdsLogin} for use by ${cdsExtend}
    and ${cdsActivate}. In default mode, deletes only data for a specific app URL
    and subdomain, optionally including relevant project settings.
    
    App URL and subdomain will be determined from project settings unless given
    by options.
    
    Project settings will be loaded by reference to the given folder, or if omitted,
    a subdirectory named as the subdomain or the current working directory.
    
    To access keyring storage, the 'keytar' Node.js module must be installed.
    If this is not the case, existing keyring entries will not be detected and
    cannot be removed by this command.


# OPTIONS

    *-l* | *--url* <url>
    
        The app URL to logout from. Can also be provided by project settings.
   
    *-s* | *--subdomain* <subdomain>
    
        The subdomain to logout from. Can also be provided by project settings.

    *--delete-settings*
    
        Additionally removes the settings for the given extension project.

    *--clear-invalid*
    
        Enter special mode to clear all tokens and settings for any project
        folders which no longer exist in the file system. Ignores any other
        command-line arguments.
        
`;
    }})


async function logout ([projectFolder], options = {}) {
    Object.assign(options, { projectFolder })

    const client = require('@sap/cds-sidecar-client')
    client.logout(options)
}


/* eslint no-console: off */
